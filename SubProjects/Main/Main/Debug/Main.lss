
AVRASM ver. 2.1.57  D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm Sat May 02 02:12:55 2015

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32Adef.inc'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(21): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Setup.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(22): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\SRAM-Mapping.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(23): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Delays.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(24): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Motor_Control.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(25): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\USART_Library.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(26): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\I2C.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(27): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\MPU-6050.inc'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(28): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\MPU-6050.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(29): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Time.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(30): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\WheelSpeed.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(31): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\LapCounter.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(32): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Communication_Protocol.asm'
                 
                 ;Main.asm
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32Adef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32A
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32A
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32ADEF_INC_
                 #define _M32ADEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32A
                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32ADEF_INC_ */
                 
                 
                 
                 ;Interrupt vector mapping
                 .org 0x00
000000 c1b0      rjmp Init
                 ;Timer1 Input Capture interrupt
                 .org	0x0C
00000c 940c 012c jmp	Input_Capture
                 ;Timer0 CTC interrupt
                 .org 0x14
000014 940c 0117 jmp Timer0_Update
                 ;USART received interrupt
                 .org 0x1A
00001a 940c 017a jmp Comm_Received
                 ;Comparator interrupt
                 .org 0x24
000024 940c 014f jmp Lap_Time
                 
                 
                 ;Library includes
                 .include "Setup.asm"
                 
                 	;Initialize the stack
                 	LDI	R16, low(RAMEND)
                     OUT	SPL, R16
                 	LDI	R16, high(RAMEND)
                     OUT	SPH, R16			
                 
                 	USART_Init 0b00000000,0b01100111	;Initialize the USART module with 9600 baud @ 16MHz clock
                 	Comm_Init							;Intialize the communication protocol
                 	Motor_Init							;Initialize the motor pwm
                 	I2C_Init 0x00,0x12					;Initialize the TWI module with Prescaler 4 and TWBR 12
                 	Time_Init							;Initialize the timer associated with timekeeping
                 	WheelSpeed_Init						;Initialize the wheel speed sensor
                 	LapCounter_Init						;Initialize the lap counter
                 	MPU6050_Init						;Initialize the MPU6050 3 times to make sure it writes the values(We should make some kind of check instead)
                 	MPU6050_Init						;
                 	MPU6050_Init						;
                 
                 	;R16, (0<<PB3)
                 	;out	DDRB, R16
                 
                 	cbi DDRB,PB3
                 
                 	ldi R16, 0x01
                 	sts Program_Running, R16
                 
                 	;Global interrupt
                 	sei					;Enable global interrupt
                 .ENDMACRO
                 .include "SRAM-Mapping.asm"
                 
                 ;SRAM starts at 0x60
                 
                 ;Accelerometer dataset from the MPU6050
                 .equ ACCEL_XOUT_H = 0x0060
                 .equ ACCEL_XOUT_L = 0x0061
                 .equ ACCEL_YOUT_H = 0x0062
                 .equ ACCEL_YOUT_L = 0x0063
                 .equ ACCEL_ZOUT_H = 0x0064
                 .equ ACCEL_ZOUT_L = 0x0065
                 
                 ;Temperature dataset from the MPU6050
                 .equ TEMP_OUT_H   = 0x0066
                 .equ TEMP_OUT_L   = 0x0067
                 
                 ;Gyro dataset from the MPU6050
                 .equ GYRO_XOUT_H  = 0x0068
                 .equ GYRO_XOUT_L  = 0x0069
                 .equ GYRO_YOUT_H  = 0x006A
                 .equ GYRO_YOUT_L  = 0x006B
                 .equ GYRO_ZOUT_H  = 0x006C
                 .equ GYRO_ZOUT_L  = 0x006D
                 
                 ;Time0 variables
                 .equ Timer_1ms_H  = 0x006E
                 .equ Timer_1ms_M  = 0x006F
                 .equ Timer_1ms_L  = 0x0070
                 
                 ;Finish line time stamp
                 .equ Time_Stamp_H = 0x0071
                 .equ Time_Stamp_M = 0x0072
                 .equ Time_Stamp_L = 0x0073
                 
                 ;Latest lap time
                 .equ Lap_time_L   = 0x0074
                 .equ Lap_time_M	  = 0x0075
                 .equ Lap_time_H	  = 0x0076
                 
                 ;Pulse Stuphs
                 .equ		Edge1_L			= 0x0077
                 .equ		Edge1_H			= 0x0078
                 .equ		Pulse_Time_L	= 0x0079
                 .equ		Pulse_Time_H	= 0x007A
                 
                 ;Status Register
                 .equ		SREG_1			= 0x007B
                 .equ Program_Running = 0x0080
                 
                 ;Communication Protocol stuff
                 .equ Comm_Received_Byte_Num = 0x007C
                 .equ Comm_Received_Byte_1 = 0x007D
                 .equ Comm_Received_Byte_2 = 0x007E
                 .equ Comm_Received_Byte_3 = 0x007F
                 
                 
                 
                 .include "Delays.asm"
                 
                 
                 ;Requires the Timer library made by Kristian! And the SRAM-Mapping.asm
                 ;These macros are intended for a micro running 16MHZ
                 
                 ;This macro can generate from 1 to 255 ms of delay.  
                 ;Uses R16, R17 and R18
                 .MACRO	DELAY_MS_M					; Cycles to execute 
                 	LDI R16, @0 ;					; 1 cycle to execute
                 	DELAY_MS_M_2: ;-----------------/
                 	LDI R17, 15 ;	              /
                 	DELAY_MS_M_1:	;------------/    /
                 	LDI R18, 177;		     /    /
                 	DELAY_MS_M_0: ;-------/    /    /
                 	NOP ;			    /C   /B   /A
                 	NOP ;				/	 /	  /
                 	NOP ;				/	 /	  /
                 	DEC R18 ;		    /    /    /
                 	BRNE DELAY_MS_M_0 ;---/    /    /
                 	DEC R17 ;		         /    /
                 	NOP ;					 /	  /
                 	BRNE DELAY_MS_M_1 ;--------/    /
                 	DEC R16 ;		              /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	BRNE DELAY_MS_M_2 ;-------------/
                 .ENDMACRO
                 ; Block C: 177*(1+1+1+1+2)-1 = 1061
                 ; Block B: 15*(1+C+1+1+2)-1 = 15990 
                 ; Block A: x*(1+B+1+1+1+1+1+1+1+2)-1 = x*16000-1
                 ; Total # of cycles is: 1 + A = x*16000 
                 ; Formula for delay: x*1ms
                 
                 Delay_MS:
000026 2e90      	mov R9, R16
000027 9030 0070 	lds R3, Timer_1ms_L
000029 9040 006f 	lds R4, Timer_1ms_M
00002b 9050 006e 	lds R5, Timer_1ms_H
                 
                 Delay_MS_Loop:
                 	
00002d 9478      	sei
00002e 9060 0070 	lds R6, Timer_1ms_L
000030 9070 006f 	lds R7, Timer_1ms_M
000032 9080 006e 	lds R8, Timer_1ms_H
                 
000034 94f8      	cli
000035 1863      	sub R6, R3
000036 0874      	sbc R7, R4
000037 0885      	sbc R8, R5
                 
000038 1469      	cp R6, R9
                 
000039 f398      	brlo Delay_MS_Loop
00003a 9478      	sei
                 .include "Motor_Control.asm"
00003b 9508      
                  ;Author: StjerneIdioten
                 
                  .EQU	MOTOR_PIN = PD7						;The pin that the motor is connected to
                 
                  .MACRO Motor_Init
                 	in R16, DDRD							;Load in the current setup of the portb
                 	ori R16, (1<<PD7)						;OR in the setup that we wish to have
                 	ldi R16, 0b01101001						;Fast-pwm, non-inverting mode, no prescaling
                 	out TCCR2, R16							;
                  .ENDMACRO
                 
                  .MACRO Motor_Set 
                 	ldi R16, @0								;Load in the 1 argument
                 	out OCR2, R16							;Set the duty cycle of the motor
                  .ENDMACRO
                 
                  Motor_Set_Percentage:
                 	
                 .include "USART_Library.asm"
00003c 9508      
                  ; Author: StjerneIdioten
                 
                 .MACRO  USART_Init
                 	;Set Baud Rate to 9600
                 	ldi R16,	@1	
                 	ldi R17,	@0
                 
                 	out	UBRRH,	R17
                 	out UBRRL,	R16
                 
                 	;Enable receiver and transmitter
                 	ldi R16,	(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)
                 	out	UCSRB,	R16
                 
                 	;Set frame format: 8data, 1stop bit
                 	ldi	R16,	(1<<URSEL)|(3<<UCSZ0)
                 	out	UCSRC,	R16
                 .ENDMACRO
                 
                  ;Waits for an empty transmit buffer and then moves R16 to the transmit buffer
                  USART_Transmit: 
                  USART_Transmit_Start:
                 	; Wait for empty transmit buffer
00003d 9b5d      	sbis	UCSRA,	UDRE
00003e cffe      	rjmp	USART_Transmit_Start
00003f b90c      	out	UDR, R16
000040 9508      ret
                 
                 
                 ;Waits for a byte to be recived and outputs it to R16
                 USART_Receive:
                 USART_Receive_Start:
                 	; Wait for data to be received
000041 9b5f      	sbis UCSRA, RXC
000042 cffe      	rjmp USART_Receive_Start
                 	; Get and return received data from buffer
000043 b10c      	in r16, UDR
000044 9508      ret
                 
                 
                 ;Outputs a newline to serial. In the format of '\r\n'
                 .Macro USART_Newline
                 	ldi R16, 0x0D
                 	call USART_Transmit 
                 	ldi R16, 0x0A
                 	call USART_Transmit 
                 .ENDMACRO
                 
                 
                 ;Outputs the byte in R16 as a string of 8 ascii 1's or 0's
                 USART_Binary:
000045 2f10      	mov R17, R16			;Copy R16 to R17
000046 e020      	ldi R18, 0x00			;Set the counter to zero
                 USART_Binary_Loop:
000047 ff17      	sbrs R17, 7				;Skip if bit 7 in R17 is set
000048 c004      	rjmp USART_Binary_0		;Jump here if the it was 0
000049 e301      	ldi R16, '1'			;Load in ascii 1 in R16
00004a 940e 003d 	call USART_Transmit		;Transmit the 1
00004c c003      	rjmp USART_Binary_End	;Jump to the end
                 USART_Binary_0:				
00004d e300      	ldi R16, '0'			;Load in ascii 0 in R16
00004e 940e 003d 	call USART_Transmit
                 USART_Binary_End:
000050 0f11      	lsl R17					;Left shift R17
000051 9523      	inc R18					;Increment R18
000052 3028      	cpi R18, 0x08			;Check if we have converted and sent an entire byte yet
000053 f799      	brne USART_Binary_Loop	;Repeat if we haven't
000054 9508      ret
                 
                 
                 ;Expecs a 16 bit value in R17:R16
                 USART_Decimal_S16:
                 
000055 0198      	movw R19:R18, R17:R16
000056 ff37      	sbrs R19, 7
000057 c007      	rjmp USART_Decimal_S16_Count_10000
                 
                 USART_Decimal_S16_Signed:
000058 e20d      	ldi R16, '-'
000059 940e 003d 	call USART_Transmit
00005b 5021      	subi R18, 0x01
00005c 4030      	sbci R19, 0x00
00005d 9520      	com R18
00005e 9530      	com R19
                 
                 USART_Decimal_S16_Count_10000:
00005f 2744      	clr R20
000060 e2b7      	ldi XH, HIGH(10000)
000061 e1a0      	ldi XL, LOW(10000)
                 USART_Decimal_S16_Count_10000_Loop:
000062 9543      	inc R20
000063 1b2a      	sub R18, XL
000064 0b3b      	sbc R19, XH
000065 f7e0      	brcc USART_Decimal_S16_Count_10000_Loop
000066 954a      	dec R20
000067 0f2a      	add R18, XL
000068 1f3b      	adc R19, XH
000069 e300      	ldi R16, 0x30
00006a 0f04      	add R16, R20
00006b 940e 003d 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_1000:
00006d 2744      	clr R20
00006e e0b3      	ldi XH, HIGH(1000)
00006f eea8      	ldi XL, LOW(1000)
                 USART_Decimal_S16_Count_1000_Loop:
000070 9543      	inc R20
000071 1b2a      	sub R18, XL
000072 0b3b      	sbc R19, XH
000073 f7e0      	brcc USART_Decimal_S16_Count_1000_Loop
000074 954a      	dec R20
000075 0f2a      	add R18, XL
000076 1f3b      	adc R19, XH
000077 e300      	ldi R16, 0x30
000078 0f04      	add R16, R20
000079 940e 003d 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_100:
00007b 2744      	clr R20
00007c e0b0      	ldi XH, HIGH(100)
00007d e6a4      	ldi XL, LOW(100)
                 USART_Decimal_S16_Count_100_Loop:
00007e 9543      	inc R20
00007f 1b2a      	sub R18, XL
000080 0b3b      	sbc R19, XH
000081 f7e0      	brcc USART_Decimal_S16_Count_100_Loop
000082 954a      	dec R20
000083 0f2a      	add R18, XL
000084 1f3b      	adc R19, XH
000085 e300      	ldi R16, 0x30
000086 0f04      	add R16, R20
000087 940e 003d 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_10:
000089 2744      	clr R20
00008a e0b0      	ldi XH, HIGH(10)
00008b e0aa      	ldi XL, LOW(10)
                 USART_Decimal_S16_Count_10_Loop:
00008c 9543      	inc R20
00008d 1b2a      	sub R18, XL
00008e 0b3b      	sbc R19, XH
00008f f7e0      	brcc USART_Decimal_S16_Count_10_Loop
000090 954a      	dec R20
000091 0f2a      	add R18, XL
000092 1f3b      	adc R19, XH
000093 e300      	ldi R16, 0x30
000094 0f04      	add R16, R20
000095 940e 003d 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_1:
000097 2744      	clr R20
000098 e0b0      	ldi XH, HIGH(1)
000099 e0a1      	ldi XL, LOW(1)
                 USART_Decimal_S16_Count_1_Loop:
00009a 9543      	inc R20
00009b 1b2a      	sub R18, XL
00009c 0b3b      	sbc R19, XH
00009d f7e0      	brcc USART_Decimal_S16_Count_1_Loop
00009e 954a      	dec R20
00009f 0f2a      	add R18, XL
0000a0 1f3b      	adc R19, XH
0000a1 e300      	ldi R16, 0x30
0000a2 0f04      	add R16, R20
0000a3 940e 003d 	call USART_Transmit
                 
                 .include "I2C.asm"
0000a5 9508      
                 ;I2C communication library 
                 
                  .equ I2C_ACK = 0x01	;Value for ACK used with I2C_Read
                  .equ I2C_NACK = 0x00	;Value for NACK used with I2C_Read
                 
                  .MACRO I2C_Init ;First argument is prescaler, second argument is TWBR
                 	;Set Prescaler
                 	ldi R16, @0
                 	out TWSR, R16
                 	
                 	;Set TWBR
                 	ldi R16, @1
                 	out TWBR, R16
                 
                 	;Enable I2C module
                 	ldi R16, (1<<TWEN)
                 	out TWCR, R16
                 
                 	nop ;Important delay to allow the module to start
                 
                  .ENDMACRO
                 
                 
                 ;This function sends a start command
                 I2C_Start:
                 	;Send Start condition
0000a6 ea04      	ldi r16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) 
0000a7 bf06      	out TWCR, r16
                 
                 I2C_Start_Wait:	
                 	;Wait for the start condition transmit			
0000a8 b706      	in r16,TWCR
0000a9 ff07      	sbrs r16,TWINT
0000aa cffd      	rjmp I2C_Start_Wait
0000ab 9508      ret
                 
                 
                 ;This function sends a stop command
                 I2C_Stop:
                 	;Send Stop condition
0000ac e904      	ldi r16, (1<<TWINT)|(1<<TWSTO)|(1<<TWEN) 
0000ad bf06      	out TWCR, r16
0000ae 9508      ret
                 
                 
                 ;This function writes the data from R16, onto the I2C data line
                 I2C_Write_Call:
0000af b903      	out TWDR, r16
0000b0 e804      	ldi r16, (1<<TWINT) | (1<<TWEN)
0000b1 bf06      	out TWCR, r16
                 
                 I2C_Write_Call_Wait:
0000b2 b706      	in r16,TWCR
0000b3 ff07      	sbrs r16,TWINT
0000b4 cffd      	rjmp I2C_Write_Call_Wait
0000b5 9508      ret
                 
                 ;This is an easy to use macro of the write function
                 .MACRO I2C_Write
                 	ldi R16, @0
                 	call I2C_Write_Call
                 .ENDMACRO
                 
                 ;This function reads in data from the I2C data line and stores it in R16.
                 ;Remember to set R16 to either I2C_ACK or I2C_NACK before calling the function!
                 ;Failure to do so may result in unwanted behaviour.
                 I2C_Read_Call:
0000b6 fd00      	sbrc r16,0
0000b7 c002      	rjmp I2C_Read_Call_ACK
0000b8 e804      	ldi r16, (1<<TWINT) | (1<<TWEN)
0000b9 c001      	rjmp I2C_Read_Call_Continue
                 I2C_Read_Call_ACK:
0000ba ec04      	ldi r16, (1<<TWINT) | (1<<TWEN) | (1<<TWEA)
                 I2C_Read_Call_Continue:
0000bb bf06      	out TWCR, r16
                 I2C_Read_Call_Wait:
0000bc b706      	in r16,TWCR
0000bd ff07      	sbrs r16,TWINT
0000be cffd      	rjmp I2C_Read_Call_Wait
                 
0000bf b103      	in R16, TWDR
0000c0 9508      ret
                 
                 //Easy to use macro which takes I2C_Ack/I2C_Nack as argument.
                 .MACRO I2C_Read
                 	ldi R16, @0
                 	call I2C_Read_Call
                 .ENDMACRO
                 
                 
                 .include "MPU-6050.inc"
                 
                 .equ MPU6050_ADDRESS_R = 0b11010001 // Address with end read bit
                 .equ MPU6050_RA_XG_OFFS_TC = 0x00 //[7] PWR_MODE, [6:1] XG_OFFS_TC, [0] OTP_BNK_VLD
                 .equ MPU6050_RA_YG_OFFS_TC = 0x01 //[7] PWR_MODE, [6:1] YG_OFFS_TC, [0] OTP_BNK_VLD
                 .equ MPU6050_RA_ZG_OFFS_TC = 0x02 //[7] PWR_MODE, [6:1] ZG_OFFS_TC, [0] OTP_BNK_VLD
                 .equ MPU6050_RA_X_FINE_GAIN = 0x03 //[7:0] X_FINE_GAIN
                 .equ MPU6050_RA_Y_FINE_GAIN = 0x04 //[7:0] Y_FINE_GAIN
                 .equ MPU6050_RA_Z_FINE_GAIN = 0x05 //[7:0] Z_FINE_GAIN
                 .equ MPU6050_RA_XA_OFFS_H = 0x06 //[15:0] XA_OFFS
                 .equ MPU6050_RA_XA_OFFS_L_TC = 0x07
                 .equ MPU6050_RA_YA_OFFS_H = 0x08 //[15:0] YA_OFFS
                 .equ MPU6050_RA_YA_OFFS_L_TC = 0x09
                 .equ MPU6050_RA_ZA_OFFS_H = 0x0A //[15:0] ZA_OFFS
                 .equ MPU6050_RA_ZA_OFFS_L_TC = 0x0B
                 .equ MPU6050_RA_XG_OFFS_USRH = 0x13 //[15:0] XG_OFFS_USR
                 .equ MPU6050_RA_XG_OFFS_USRL = 0x14
                 .equ MPU6050_RA_YG_OFFS_USRH = 0x15 //[15:0] YG_OFFS_USR
                 .equ MPU6050_RA_YG_OFFS_USRL = 0x16
                 .equ MPU6050_RA_ZG_OFFS_USRH = 0x17 //[15:0] ZG_OFFS_USR
                 .equ MPU6050_RA_ZG_OFFS_USRL = 0x18
                 .equ MPU6050_RA_SMPLRT_DIV = 0x19
                 .equ MPU6050_RA_CONFIG = 0x1A
                 .equ MPU6050_RA_GYRO_CONFIG = 0x1B
                 .equ MPU6050_RA_ACCEL_CONFIG = 0x1C
                 .equ MPU6050_RA_FF_THR = 0x1D
                 .equ MPU6050_RA_FF_DUR = 0x1E
                 .equ MPU6050_RA_MOT_THR = 0x1F
                 .equ MPU6050_RA_MOT_DUR = 0x20
                 .equ MPU6050_RA_ZRMOT_THR = 0x21
                 .equ MPU6050_RA_ZRMOT_DUR = 0x22
                 .equ MPU6050_RA_FIFO_EN = 0x23
                 .equ MPU6050_RA_I2C_MST_CTRL = 0x24
                 .equ MPU6050_RA_I2C_SLV0_ADDR = 0x25
                 .equ MPU6050_RA_I2C_SLV0_REG = 0x26
                 .equ MPU6050_RA_I2C_SLV0_CTRL = 0x27
                 .equ MPU6050_RA_I2C_SLV1_ADDR = 0x28
                 .equ MPU6050_RA_I2C_SLV1_REG = 0x29
                 .equ MPU6050_RA_I2C_SLV1_CTRL = 0x2A
                 .equ MPU6050_RA_I2C_SLV2_ADDR = 0x2B
                 .equ MPU6050_RA_I2C_SLV2_REG = 0x2C
                 .equ MPU6050_RA_I2C_SLV2_CTRL = 0x2D
                 .equ MPU6050_RA_I2C_SLV3_ADDR = 0x2E
                 .equ MPU6050_RA_I2C_SLV3_REG = 0x2F
                 .equ MPU6050_RA_I2C_SLV3_CTRL = 0x30
                 .equ MPU6050_RA_I2C_SLV4_ADDR = 0x31
                 .equ MPU6050_RA_I2C_SLV4_REG = 0x32
                 .equ MPU6050_RA_I2C_SLV4_DO = 0x33
                 .equ MPU6050_RA_I2C_SLV4_CTRL = 0x34
                 .equ MPU6050_RA_I2C_SLV4_DI = 0x35
                 .equ MPU6050_RA_I2C_MST_STATUS = 0x36
                 .equ MPU6050_RA_INT_PIN_CFG = 0x37
                 .equ MPU6050_RA_INT_ENABLE = 0x38
                 .equ MPU6050_RA_DMP_INT_STATUS = 0x39
                 .equ MPU6050_RA_INT_STATUS = 0x3A
                 .equ MPU6050_RA_ACCEL_XOUT_H = 0x3B
                 .equ MPU6050_RA_ACCEL_XOUT_L = 0x3C
                 .equ MPU6050_RA_ACCEL_YOUT_H = 0x3D
                 .equ MPU6050_RA_ACCEL_YOUT_L = 0x3E
                 .equ MPU6050_RA_ACCEL_ZOUT_H = 0x3F
                 .equ MPU6050_RA_ACCEL_ZOUT_L = 0x40
                 .equ MPU6050_RA_TEMP_OUT_H = 0x41
                 .equ MPU6050_RA_TEMP_OUT_L = 0x42
                 .equ MPU6050_RA_GYRO_XOUT_H = 0x43
                 .equ MPU6050_RA_GYRO_XOUT_L = 0x44
                 .equ MPU6050_RA_GYRO_YOUT_H = 0x45
                 .equ MPU6050_RA_GYRO_YOUT_L = 0x46
                 .equ MPU6050_RA_GYRO_ZOUT_H = 0x47
                 .equ MPU6050_RA_GYRO_ZOUT_L = 0x48
                 .equ MPU6050_RA_EXT_SENS_DATA_00 = 0x49
                 .equ MPU6050_RA_EXT_SENS_DATA_01 = 0x4A
                 .equ MPU6050_RA_EXT_SENS_DATA_02 = 0x4B
                 .equ MPU6050_RA_EXT_SENS_DATA_03 = 0x4C
                 .equ MPU6050_RA_EXT_SENS_DATA_04 = 0x4D
                 .equ MPU6050_RA_EXT_SENS_DATA_05 = 0x4E
                 .equ MPU6050_RA_EXT_SENS_DATA_06 = 0x4F
                 .equ MPU6050_RA_EXT_SENS_DATA_07 = 0x50
                 .equ MPU6050_RA_EXT_SENS_DATA_08 = 0x51
                 .equ MPU6050_RA_EXT_SENS_DATA_09 = 0x52
                 .equ MPU6050_RA_EXT_SENS_DATA_10 = 0x53
                 .equ MPU6050_RA_EXT_SENS_DATA_11 = 0x54
                 .equ MPU6050_RA_EXT_SENS_DATA_12 = 0x55
                 .equ MPU6050_RA_EXT_SENS_DATA_13 = 0x56
                 .equ MPU6050_RA_EXT_SENS_DATA_14 = 0x57
                 .equ MPU6050_RA_EXT_SENS_DATA_15 = 0x58
                 .equ MPU6050_RA_EXT_SENS_DATA_16 = 0x59
                 .equ MPU6050_RA_EXT_SENS_DATA_17 = 0x5A
                 .equ MPU6050_RA_EXT_SENS_DATA_18 = 0x5B
                 .equ MPU6050_RA_EXT_SENS_DATA_19 = 0x5C
                 .equ MPU6050_RA_EXT_SENS_DATA_20 = 0x5D
                 .equ MPU6050_RA_EXT_SENS_DATA_21 = 0x5E
                 .equ MPU6050_RA_EXT_SENS_DATA_22 = 0x5F
                 .equ MPU6050_RA_EXT_SENS_DATA_23 = 0x60
                 .equ MPU6050_RA_MOT_DETECT_STATUS = 0x61
                 .equ MPU6050_RA_I2C_SLV0_DO = 0x63
                 .equ MPU6050_RA_I2C_SLV1_DO = 0x64
                 .equ MPU6050_RA_I2C_SLV2_DO = 0x65
                 .equ MPU6050_RA_I2C_SLV3_DO = 0x66
                 .equ MPU6050_RA_I2C_MST_DELAY_CTRL = 0x67
                 .equ MPU6050_RA_SIGNAL_PATH_RESET = 0x68
                 .equ MPU6050_RA_MOT_DETECT_CTRL = 0x69
                 .equ MPU6050_RA_USER_CTRL = 0x6A
                 .equ MPU6050_RA_PWR_MGMT_1 = 0x6B
                 .equ MPU6050_RA_PWR_MGMT_2 = 0x6C
                 .equ MPU6050_RA_BANK_SEL = 0x6D
                 .equ MPU6050_RA_MEM_START_ADDR = 0x6E
                 .equ MPU6050_RA_MEM_R_W = 0x6F
                 .equ MPU6050_RA_DMP_CFG_1 = 0x70
                 .equ MPU6050_RA_DMP_CFG_2 = 0x71
                 .equ MPU6050_RA_FIFO_COUNTH = 0x72
                 .equ MPU6050_RA_FIFO_COUNTL = 0x73
                 .equ MPU6050_RA_FIFO_R_W = 0x74
                 .include "MPU-6050.asm"
                 
                 ;This library relies on the I2C library made by StjerneIdioten.
                 ;This library relies on the "MPU-6050.inc" where all the definitions of registers are defined.
                 ;This library relies on having defined the correct SRAM locations prior to reading in data.
                 
                 ;Setup the MPU-6050
                 .MACRO MPU6050_Init
                 
                 	call I2C_Start							;Send a start									
                 	I2C_Write MPU6050_ADDRESS_W				;Send the write address of the MPU6050
                 
                 	I2C_Write MPU6050_RA_SMPLRT_DIV			;Write the address to start the burst write at
                 
                 	;Sets sample rate to 8000/1+7 = 1000Hz
                 	I2C_Write 0x07
                 
                 	;MPU6050_RA_CONFIG, Disable FSync, 256Hz DLPF
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_GYRO_CONFIG, Disable gyro self tests, scale of 500 degrees/s
                 	I2C_Write 0b00001000
                 
                 	;MPU6050_RA_ACCEL_CONFIG ,Disable accel self tests, scale of +-16g, no DHPF
                 	I2C_Write 0b00001000
                 
                 	;MPU6050_RA_FF_THR ,Freefall threshold of |0mg|
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_FF_DUR ,Freefall duration limit of 0
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_MOT_THR ,Motion threshold of 0mg
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_MOT_DUR ,Motion duration of 0s
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_ZRMOT_THR ,Zero motion threshold
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_ZRMOT_DUR ,Zero motion duration threshold
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_FIFO_EN ,Disable sensor output to FIFO buffer
                 	I2C_Write 0x00
                 
                 	;Aux I2C setup
                 	;MPU6050_RA_I2C_MST_CTRL, Sets AUX I2C to single master control, plus other config
                 	I2C_Write 0x00
                 
                 	;Setup AUX I2C slaves
                 	;MPU6050_RA_I2C_SLV0_ADDR
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV0_REG
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV0_CTR
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV1_ADDR
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV1_REG
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV1_CTRL
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV2_ADDR
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV2_REG
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV2_CTRL
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV3_ADDR
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV3_REG
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV3_CTRL
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV4_ADDR
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV4_REG
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV4_DO
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV4_CTRL
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV4_DI
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_MST_STATUS ;Read-only
                 
                 	;MPU6050_RA_INT_PIN_CFG, Setup INT pin and AUX I2C pass through
                 	call I2C_Start							;Send a start
                 	I2C_Write MPU6050_ADDRESS_W				;Send the write address of the MPU6050
                 
                 	I2C_Write MPU6050_RA_INT_PIN_CFG		;Write the address to start the burst write at
                 	I2C_Write 0x00							;Clear the register and burst write
                 
                 	;MPU6050_RA_INT_ENABLE, Enable data ready interrupt
                     I2C_Write 0x00
                 
                 	;MPU6050_RA_DMP_INT_STATUS				;Read-only
                     ;MPU6050_RA_INT_STATUS 3A				;Read-only
                     ;MPU6050_RA_ACCEL_XOUT_H				;Read-only
                     ;MPU6050_RA_ACCEL_XOUT_L				;Read-only
                     ;MPU6050_RA_ACCEL_YOUT_H				;Read-only
                     ;MPU6050_RA_ACCEL_YOUT_L				;Read-only
                     ;MPU6050_RA_ACCEL_ZOUT_H				;Read-only
                     ;MPU6050_RA_ACCEL_ZOUT_L				;Read-only
                     ;MPU6050_RA_TEMP_OUT_H					;Read-only
                     ;MPU6050_RA_TEMP_OUT_L					;Read-only
                     ;MPU6050_RA_GYRO_XOUT_H					;Read-only
                     ;MPU6050_RA_GYRO_XOUT_L					;Read-only
                     ;MPU6050_RA_GYRO_YOUT_H					;Read-only
                     ;MPU6050_RA_GYRO_YOUT_L					;Read-only
                     ;MPU6050_RA_GYRO_ZOUT_H					;Read-only
                     ;MPU6050_RA_GYRO_ZOUT_L					;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_00			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_01			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_02			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_03			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_04			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_05			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_06			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_07			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_08			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_09			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_10			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_11			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_12			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_13			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_14			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_15			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_16			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_17			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_18			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_19			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_20			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_21			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_22			;Read-only
                     ;MPU6050_RA_EXT_SENS_DATA_23			;Read-only
                     ;MPU6050_RA_MOT_DETECT_STATUS			;Read-only
                 
                 	;Slave out, dont care
                 
                 	;MPU6050_RA_I2C_SLV0_DO
                 	call I2C_Start							;Send a start
                 	I2C_Write MPU6050_ADDRESS_W				;Send the write address of the MPU6050
                 
                 	I2C_Write MPU6050_RA_I2C_SLV0_DO		;Write the address to start the burst write at
                 	I2C_Write 0x00							;Clear the register and burst write
                 
                 	;MPU6050_RA_I2C_SLV1_DO
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV2_DO
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_SLV3_DO
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_I2C_MST_DELAY_CTRL, More slave config
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_SIGNAL_PATH_RESET, Reset sensor signal paths
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_MOT_DETECT_CTRL, Motion detection control
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_USER_CTRL, Disables FIFO, AUX I2C, FIFO and I2C reset bits to 0
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_PWR_MGMT_1, Sets clock source to gyro reference w/ PLL
                 	I2C_Write 0b00000010
                 
                 	;MPU6050_RA_PWR_MGMT_2, Controls frequency of wakeups in accel low power mode plus the sensor standby modes
                 	I2C_Write 0x00
                 
                 	;MPU6050_RA_BANK_SEL					;Not in datasheet
                     ;MPU6050_RA_MEM_START_ADDR				;Not in datasheet
                     ;MPU6050_RA_MEM_R_W						;Not in datasheet
                     ;MPU6050_RA_DMP_CFG_1					;Not in datasheet
                     ;MPU6050_RA_DMP_CFG_2					;Not in datasheet
                     ;MPU6050_RA_FIFO_COUNTH					;Read-only
                     ;MPU6050_RA_FIFO_COUNTL					;Read-only
                 
                     ;Data transfer to and from the FIFO buffer
                 	call I2C_Start							;Send a start
                 	I2C_Write MPU6050_ADDRESS_W				;Send the write address of the MPU6050
                 
                 	I2C_Write MPU6050_RA_FIFO_R_W			;Write the address of the FIFO buffer register
                 	I2C_Write 0x00							;Write zero to disable it.
                 
                 	;MPU6050_RA_WHO_AM_I					;Read-only, I2C address
                 
                 	call I2C_Stop							;Send a stop
                 .ENDMACRO
                 
                 
                 ;This macro gets the value stored in the Who_Am_I register in the MPU-6050. This will always return 0x68 independent of AD0! Useful for testing the connection.
                 .MACRO MPU6050_Get_Address
                 	call I2C_Start							;Send a start
                 	I2C_Write MPU6050_ADDRESS_W				;Send the write address of the MPU6050
                 	I2C_Write MPU6050_RA_WHO_AM_I			;Write the address of the Who Am I register
                 
                 	call I2C_Start							;Send a start
                 	I2C_Write MPU6050_ADDRESS_R				;Send the read address of the MPU6050
                 
                 	I2C_Read I2C_Nack						;Move the read in value to R17, because R16 is used in the stop function
                 	mov R17, R16							;
                 
                 	call I2C_Stop							;Send a stop
                 
                 	mov R16, R17							;Move the read in value back into R16 
                 .ENDMACRO
                 
                 
                 ;Reads in the entire dataset supplied by the MPU6050 by doing a couple of burst reads. The values can be found at the SRAM addresses specified in SRAM-Mapping
                 MPU6050_Read_Dataset:
0000c1 940e 00a6 	call I2C_Start							;Send a start
0000c3 ed00
0000c4 940e 00af 	I2C_Write MPU6050_ADDRESS_W				;Send the write address of the MPU6050
0000c6 e30b
0000c7 940e 00af 	I2C_Write MPU6050_RA_ACCEL_XOUT_H		;Write the address to begin reading from.
                 
0000c9 940e 00a6 	call I2C_Start							;Send a repeated start
0000cb ed01
0000cc 940e 00af 	I2C_Write MPU6050_ADDRESS_R				;Send the read address of the MPU6050
                 
0000ce e001
0000cf 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000d1 9300 0060 	sts ACCEL_XOUT_H, R16					;Store the ACCEL_XOUT_H in SRAM
                 
0000d3 e001
0000d4 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000d6 9300 0061 	sts ACCEL_XOUT_L, R16					;Store the ACCEL_XOUT_L in SRAM
                 
0000d8 e001
0000d9 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000db 9300 0062 	sts ACCEL_YOUT_H, R16					;Store the ACCEL_YOUT_H in SRAM
                 
0000dd e001
0000de 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000e0 9300 0063 	sts ACCEL_YOUT_L, R16					;Store the ACCEL_YOUT_L in SRAM
                 
0000e2 e001
0000e3 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000e5 9300 0064 	sts ACCEL_ZOUT_H, R16					;Store the ACCEL_ZOUT_H in SRAM
                 
0000e7 e001
0000e8 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000ea 9300 0065 	sts ACCEL_ZOUT_L, R16					;Store the ACCEL_ZOUT_L in SRAM
                 
0000ec e001
0000ed 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000ef 9300 0066 	sts TEMP_OUT_H, R16						;Store the TEMP_OUT_H in SRAM
                 
0000f1 e001
0000f2 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000f4 9300 0067 	sts TEMP_OUT_L, R16						;Store the TEMP_OUT_L in SRAM
                 
0000f6 e001
0000f7 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000f9 9300 0068 	sts GYRO_XOUT_H, R16					;Store the GYRO_XOUT_H in SRAM
                 
0000fb e001
0000fc 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
0000fe 9300 0069 	sts GYRO_XOUT_L, R16					;Store the GYRO_XOUT_L in SRAM
                 
000100 e001
000101 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
000103 9300 006a 	sts GYRO_YOUT_H, R16					;Store the GYRO_YOUT_H in SRAM
                 	
000105 e001
000106 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
000108 9300 006b 	sts GYRO_YOUT_L, R16					;Store the GYRO_YOUT_L in SRAM
                 	
00010a e001
00010b 940e 00b6 	I2C_Read I2C_Ack						;Reply with an ACK to indicate that we wish to read the next byte too
00010d 9300 006c 	sts GYRO_ZOUT_H, R16					;Store the GYRO_ZOUT_H in SRAM
                 	
00010f e000
000110 940e 00b6 	I2C_Read I2C_Nack						;Reply with an NACK to indicate that we do not wish to read the next byte too
000112 9300 006b 	sts GYRO_YOUT_L, R16					;Store the GYRO_YOUT_L in SRAM
                 
000114 940e 00ac 	call I2C_Stop							;Send a stop
                 .include "Time.asm"
000116 9508      
                 
                 ; Initialize timer0 to generate an output compare interrupt every 1[ms]
                 .MACRO Time_Init
                 			ldi		R16, 0b00001011			; CTC-mode, 1/64 prescaling -> 250 cycles pr ms.
                 			out		TCCR0, R16
                 			ldi		R16, 0x00
                 			out		TCNT0, R16				; Counter0 initialization
                 			ldi		R16, 249				; 249+1 cycles = 1[ms] for every output compare match
                 			out		OCR0, R16
                 			
                 			clr		R16
                 			sts		Timer_1ms_L, R16
                 			sts		Timer_1ms_M, R16
                 			sts		Timer_1ms_H, R16	
                 
                 			in		R16, TIMSK
                 			ori		R16, (1<<OCIE0)			;Enable interrupt on output compare match for timer0
                 			out		TIMSK, R16				;Timer/interrupt masking register
                 			
                 			
                 .ENDMACRO
                 
                 ; Timer subroutines
                 
                 Timer0_Update:
                 			
000117 e041      			ldi		R20, 0x01
000118 9000 0070 			lds		R0, Timer_1ms_L			
00011a 0e04      			add		R0, R20						;Advance time by 1ms whenever timer0 has compare match
00011b 9200 0070 			sts		Timer_1ms_L, R0	
00011d f468      			brcc	Timer_Update_End
                 			
00011e e040      			ldi		R20, 0x00
00011f 9010 006f 			lds		R1, Timer_1ms_M				;24 bits = 16777 seconds = 4.6 hours... ish :D
000121 1e14      			adc		R1, R20
000122 9210 006f 			sts		Timer_1ms_M, R1	
000124 f430      			brcc	Timer_Update_End
                 			
000125 9020 006e 			lds		R2, Timer_1ms_H
000127 1e24      			adc		R2, R20
000128 9220 006e 			sts		Timer_1ms_H, R2
00012a f400      			brcc	Timer_Update_End
                 			
                 Timer_Update_End:	
                 		
00012b 9518      			reti
                 			
                 
                 .include "WheelSpeed.asm"
                 
                 .MACRO WheelSpeed_Init
                 			ldi		R16, 0x00
                 			out		TCCR1A, R16
                 			ldi		R16, 0b10000010			; Falling edge triggered, 1/1024 prescaling
                 			out		TCCR1B, R16	
                 
                 			clr		R16
                 			sts		Edge1_L, R16
                 			sts		Edge1_H, R16
                 
                 			in		R16, TIMSK
                 			ori		R16, (1<<TICIE1)		;Enable interrupt on output compare match for timer0
                 			out		TIMSK, R16				;Timer/interrupt masking register
                 
                 .ENDMACRO
                 
                 Input_Capture:
                 
                 			;ldi R16, 'D'
                 			;call USART_Transmit
                 
00012c 9100 007b 			lds		R16, SREG_1
00012e fd00      			sbrc	R16, 0
00012f c00a      			rjmp	EDGE2
                 			
000130 b406      EDGE1:		in		R0, ICR1L
000131 b417      			in		R1, ICR1H
                 			
000132 9200 0077 			sts		Edge1_L, R0
000134 9210 0078 			sts		Edge1_H, R1
                 			
                 			
000136 6001      			sbr		R16, 0b00000001					; set bit 0 in R16 (performs a logical ORI instruction)
000137 9300 007b 			sts		SREG_1, R16
000139 9518      			reti
                 			
00013a 9000 0077 EDGE2:		lds		R0, Edge1_L
00013c 9010 0078 			lds		R1, Edge1_H
                 			
00013e b426      			in		R2, ICR1L
00013f b437      			in		R3, ICR1H
                 			
000140 1820      			sub		R2, R0
000141 0831      			sbc		R3, R1
                 			
000142 9220 0079 			sts		Pulse_Time_L, R2
000144 9230 007a 			sts		Pulse_Time_H, R3
                 			
000146 e000      			ldi		R16, 0x00
000147 bd0d      			out		TCNT1H, R16						; Temp = R16
000148 bd0c      			out		TCNT1L, R16						; TCNT1L = R16 & TCNT1H = Temp
                 			
                 			
000149 9100 007b 			lds		R16, SREG_1
00014b 7f0e      			cbr		R16, 0b00000001					; clear bit 0 in R16 (performs logical AND with complement of operand)
00014c 9300 007b 			sts		SREG_1, R16
                 			
00014e 9518      			reti
                 .include "LapCounter.asm"
                 
                 
                 	clr	R16
                 	sts	Time_Stamp_L, R16
                 	sts	Time_Stamp_M, R16
                 	sts	Time_Stamp_H, R16
                 			
                 	sts	Lap_time_L, R16
                 	sts	Lap_time_M, R16
                 	sts	Lap_time_H, R16
                 
                 	in R16, ACSR
                 	ori R16, 0x48						;Initialize comparator with bandgap reference and enable interrupt
                 	out ACSR, R16						;
                 
                 	in R16, SFIOR							;
                 	andi R16, ~(1<<ACME)					;Disable comparator multiplexer (AIN1 = inverting input for comparator)
                 	out SFIOR, R16							;
                 
                 .ENDMACRO
                 
                 Lap_Time:	
00014f 9000 0070 	lds		R0, Timer_1ms_L				
000151 9010 006f 	lds		R1, Timer_1ms_M				; Current time since startup in ms
000153 9020 006e 	lds		R2, Timer_1ms_H				 
                 			
000155 9030 0073 	lds		R3, Time_Stamp_L			
000157 9040 0072 	lds		R4, Time_Stamp_M			; Time stamp at start of lap
000159 9050 0071 	lds		R5, Time_Stamp_H
                 			
00015b 9200 0073 	sts		Time_Stamp_L, R0			
00015d 9210 0072 	sts		Time_Stamp_M, R1			; New time stamp for next lap
00015f 9220 0071 	sts		Time_Stamp_H, R2	
                 			
000161 1803      	sub		R0, R3						
000162 0814      	sbc		R1, R4						; Difference between current time and last time stamp
000163 0825      	sbc		R2, R5
                 			
000164 2011      	tst R1
000165 f099      	breq Lap_Time_End
                 
000166 9200 0074 	sts		Lap_time_L, R0				
000168 9210 0075 	sts		Lap_time_M, R1				; Latest lap time
00016a 9220 0076 	sts		Lap_time_H, R2
                 			
00016c e400      	ldi		R16, 0x40					; Disable Comparator interrupt
00016d b908      	out		ACSR, R16					; Global interrupt register
                 			
00016e e508      	ldi		R16, 0b01011000				; Enable Comparator interrupt and clear comparator interrupt flag
00016f b908      	out		ACSR, R16					; Global interrupt register
                 
                 	
000170 e407      	ldi R16, 'G'
000171 940e 003d 	call USART_Transmit
000173 e00d
000174 940e 003d
000176 e00a
000177 940e 003d 	USART_Newline
                 	
                 
                 Lap_Time_End:
                 
                 .include "Communication_Protocol.asm"
000179 9518      
                 	ldi R16, 0x01							;Initialize the counter as being the first byte
                 	sts Comm_Received_Byte_Num, R16			;
                 	clr R16									;Clear all of the SRAM-values used
                 	sts Comm_Received_Byte_1, R16			;
                 	sts Comm_Received_Byte_2, R16			;
                 	sts Comm_Received_Byte_3, R16			;
                 .ENDMACRO
                 
                 
                 ;Define Types
                 .equ Comm_Type_SET = 0x55					;Used for setting a value or activating a command
                 .equ Comm_Type_GET = 0xAA					;Used for getting a value from the microcontroller
                 
                 ;Define Set Commands
                 .equ Comm_Command_Start = 0x10				;Start the car at a specific % of motor speed
                 .equ Comm_Command_Stop = 0x11				;Stop the car
                 
                 ;Define Get Commands
                 
                 
                 ;Implemetation of the required communication protocol
                 Comm_Received:
                 
00017a 9100 007c 	lds R16, Comm_Received_Byte_Num			;What byte # did we receive
                 
00017c 3001      	cpi R16, 0x01							;If it was the first
00017d f019      	breq Comm_Received_Type					;Set the type
                 
00017e 3002      	cpi R16, 0x02							;If it was the second
00017f f041      	breq Comm_Received_Command				;Set the command
                 
                 	;Working under the assumption that if it was not the first or second byte, then it must be the third.
                 
000180 c00e      	rjmp Comm_Received_Execute				;Go to the execution of the received telegram
                 
                 
                 ;Received a type
                 Comm_Received_Type:
                 
000181 e002      	ldi R16, 0x02							;Set the counter to two
000182 9300 007c 	sts Comm_Received_Byte_Num, R16			;Store it
                 
000184 b10c      	in r16, UDR								;Store the received type in SRAM
000185 9300 007d 	sts Comm_Received_Byte_1, R16			;	
000187 9518      	reti									;Return from interrupt
                 
                 ;Received a command
                 Comm_Received_Command:
                 
000188 e003      	ldi R16, 0x03							;Set the counter to three
000189 9300 007c 	sts Comm_Received_Byte_Num, R16			;Store it
                 
00018b b10c      	in r16, UDR								;Store the received command in SRAM
00018c 9300 007e 	sts Comm_Received_Byte_2, R16			;
00018e 9518      	reti									;Return from interrupt
                 
                 ;Execute the telegram received
                 Comm_Received_Execute:
                 
00018f b10c      	in r16, UDR								;Read in the received parameter
000190 9300 007f 	sts Comm_Received_Byte_3, R16			;Store it in SRAM
                 	
000192 e001      	ldi R16, 0x01							;Reset the counter
000193 9300 007c 	sts Comm_Received_Byte_Num, R16			;Store it in SRAM
                 
                 ;---------------------------------------------------------------------------------------------------------------------
                 ;Types
                 ;---------------------------------------------------------------------------------------------------------------------
                 
000195 9100 007d 	lds R16, Comm_Received_Byte_1			;Load in the first(Type) byte
                 
                 	;SET
000197 3505      	cpi R16, Comm_Type_SET					;Check if we received a SET and branch if it was
000198 f019      	breq Comm_Received_Type_Set				;
                 
                 	;GET
000199 3a0a      	cpi R16, Comm_Type_GET					;Check if we received a GET and branch if it was
00019a f0a9      	breq Comm_Received_Type_Get				;
                 
00019b 9518      	reti
                 ;---------------------------------------------------------------------------------------------------------------------
                 ;SET's
                 ;---------------------------------------------------------------------------------------------------------------------
                 
                 Comm_Received_Type_Set:
                 
00019c 9100 007e 	lds R16, Comm_Received_Byte_2			;Load in the second(Command) byte
                 
00019e 3100      	cpi R16, Comm_Command_Start				;Check if we received a Start command
00019f f019      	breq Comm_Received_Command_Start		;
                 
0001a0 3101      	cpi R16, Comm_Command_Stop				;Check if we received a Stop command
0001a1 f041      	breq Comm_Received_Command_Stop			;
                 
                 	;Insert error handling here
                 
0001a2 9518      	reti									;Do nothing if it was not a legit code
                 
                 ;Start
                 Comm_Received_Command_Start:
0001a3 e001      	ldi R16, 0x01							;Set the flag which determines if the main program should run
0001a4 9300 0080 	sts Program_Running, R16				;
0001a6 9100 007f 	lds R16, Comm_Received_Byte_3			;Load in the third(Parameter) byte
                 
                 	;Insert percentage calculating code here
                 
0001a8 bd03      	out OCR2, R16							;And set the pwm duty cycle of the motor.
0001a9 9518      	reti									;Return from interrupt
                 
                 ;Stop
                 Comm_Received_Command_Stop:
0001aa e000      	ldi R16, 0x00							;Clear the flag which determines if the main program should run
0001ab 9300 0080 	sts Program_Running, R16				;
0001ad e000      	ldi R16, 0x00							;Load in 0x00
0001ae bd03      	out OCR2, R16							;And set the pwm duty cycle to nothing to stop the motor.
0001af 9518      	reti
                 
                 
                 ;---------------------------------------------------------------------------------------------------------------------
                 ;GET's
                 ;---------------------------------------------------------------------------------------------------------------------
                 
                 Comm_Received_Type_Get:	
                 
                 	;Insert error handling here
                 
0001b0 9518      
                 Init:
                 	
0001b1 e50f
0001b2 bf0d
0001b3 e008
0001b4 bf0e
0001b5 e607
0001b6 e010
0001b7 bd10
0001b8 b909
0001b9 e908
0001ba b90a
0001bb e806
0001bc bd00
0001bd e001
0001be 9300 007c
0001c0 2700
0001c1 9300 007d
0001c3 9300 007e
0001c5 9300 007f
0001c7 b301
0001c8 6800
0001c9 e609
0001ca bd05
0001cb e000
0001cc b901
0001cd e102
0001ce b900
0001cf e004
0001d0 bf06
0001d1 0000
0001d2 e00b
0001d3 bf03
0001d4 e000
0001d5 bf02
0001d6 ef09
0001d7 bf0c
0001d8 2700
0001d9 9300 0070
0001db 9300 006f
0001dd 9300 006e
0001df b709
0001e0 6002
0001e1 bf09
0001e2 e000
0001e3 bd0f
0001e4 e802
0001e5 bd0e
0001e6 2700
0001e7 9300 0077
0001e9 9300 0078
0001eb b709
0001ec 6200
0001ed bf09
0001ee 2700
0001ef 9300 0073
0001f1 9300 0072
0001f3 9300 0071
0001f5 9300 0074
0001f7 9300 0075
0001f9 9300 0076
0001fb b108
0001fc 6408
0001fd b908
0001fe b700
0001ff 7f07
000200 bf00
000201 940e 00a6
000203 ed00
000204 940e 00af
000206 e109
000207 940e 00af
000209 e007
00020a 940e 00af
00020c e000
00020d 940e 00af
00020f e008
000210 940e 00af
000212 e008
000213 940e 00af
000215 e000
000216 940e 00af
000218 e000
000219 940e 00af
00021b e000
00021c 940e 00af
00021e e000
00021f 940e 00af
000221 e000
000222 940e 00af
000224 e000
000225 940e 00af
000227 e000
000228 940e 00af
00022a e000
00022b 940e 00af
00022d e000
00022e 940e 00af
000230 e000
000231 940e 00af
000233 e000
000234 940e 00af
000236 e000
000237 940e 00af
000239 e000
00023a 940e 00af
00023c e000
00023d 940e 00af
00023f e000
000240 940e 00af
000242 e000
000243 940e 00af
000245 e000
000246 940e 00af
000248 e000
000249 940e 00af
00024b e000
00024c 940e 00af
00024e e000
00024f 940e 00af
000251 e000
000252 940e 00af
000254 e000
000255 940e 00af
000257 e000
000258 940e 00af
00025a e000
00025b 940e 00af
00025d e000
00025e 940e 00af
000260 940e 00a6
000262 ed00
000263 940e 00af
000265 e307
000266 940e 00af
000268 e000
000269 940e 00af
00026b e000
00026c 940e 00af
00026e 940e 00a6
000270 ed00
000271 940e 00af
000273 e603
000274 940e 00af
000276 e000
000277 940e 00af
000279 e000
00027a 940e 00af
00027c e000
00027d 940e 00af
00027f e000
000280 940e 00af
000282 e000
000283 940e 00af
000285 e000
000286 940e 00af
000288 e000
000289 940e 00af
00028b e000
00028c 940e 00af
00028e e002
00028f 940e 00af
000291 e000
000292 940e 00af
000294 940e 00a6
000296 ed00
000297 940e 00af
000299 e704
00029a 940e 00af
00029c e000
00029d 940e 00af
00029f 940e 00ac
0002a1 940e 00a6
0002a3 ed00
0002a4 940e 00af
0002a6 e109
0002a7 940e 00af
0002a9 e007
0002aa 940e 00af
0002ac e000
0002ad 940e 00af
0002af e008
0002b0 940e 00af
0002b2 e008
0002b3 940e 00af
0002b5 e000
0002b6 940e 00af
0002b8 e000
0002b9 940e 00af
0002bb e000
0002bc 940e 00af
0002be e000
0002bf 940e 00af
0002c1 e000
0002c2 940e 00af
0002c4 e000
0002c5 940e 00af
0002c7 e000
0002c8 940e 00af
0002ca e000
0002cb 940e 00af
0002cd e000
0002ce 940e 00af
0002d0 e000
0002d1 940e 00af
0002d3 e000
0002d4 940e 00af
0002d6 e000
0002d7 940e 00af
0002d9 e000
0002da 940e 00af
0002dc e000
0002dd 940e 00af
0002df e000
0002e0 940e 00af
0002e2 e000
0002e3 940e 00af
0002e5 e000
0002e6 940e 00af
0002e8 e000
0002e9 940e 00af
0002eb e000
0002ec 940e 00af
0002ee e000
0002ef 940e 00af
0002f1 e000
0002f2 940e 00af
0002f4 e000
0002f5 940e 00af
0002f7 e000
0002f8 940e 00af
0002fa e000
0002fb 940e 00af
0002fd e000
0002fe 940e 00af
000300 940e 00a6
000302 ed00
000303 940e 00af
000305 e307
000306 940e 00af
000308 e000
000309 940e 00af
00030b e000
00030c 940e 00af
00030e 940e 00a6
000310 ed00
000311 940e 00af
000313 e603
000314 940e 00af
000316 e000
000317 940e 00af
000319 e000
00031a 940e 00af
00031c e000
00031d 940e 00af
00031f e000
000320 940e 00af
000322 e000
000323 940e 00af
000325 e000
000326 940e 00af
000328 e000
000329 940e 00af
00032b e000
00032c 940e 00af
00032e e002
00032f 940e 00af
000331 e000
000332 940e 00af
000334 940e 00a6
000336 ed00
000337 940e 00af
000339 e704
00033a 940e 00af
00033c e000
00033d 940e 00af
00033f 940e 00ac
000341 940e 00a6
000343 ed00
000344 940e 00af
000346 e109
000347 940e 00af
000349 e007
00034a 940e 00af
00034c e000
00034d 940e 00af
00034f e008
000350 940e 00af
000352 e008
000353 940e 00af
000355 e000
000356 940e 00af
000358 e000
000359 940e 00af
00035b e000
00035c 940e 00af
00035e e000
00035f 940e 00af
000361 e000
000362 940e 00af
000364 e000
000365 940e 00af
000367 e000
000368 940e 00af
00036a e000
00036b 940e 00af
00036d e000
00036e 940e 00af
000370 e000
000371 940e 00af
000373 e000
000374 940e 00af
000376 e000
000377 940e 00af
000379 e000
00037a 940e 00af
00037c e000
00037d 940e 00af
00037f e000
000380 940e 00af
000382 e000
000383 940e 00af
000385 e000
000386 940e 00af
000388 e000
000389 940e 00af
00038b e000
00038c 940e 00af
00038e e000
00038f 940e 00af
000391 e000
000392 940e 00af
000394 e000
000395 940e 00af
000397 e000
000398 940e 00af
00039a e000
00039b 940e 00af
00039d e000
00039e 940e 00af
0003a0 940e 00a6
0003a2 ed00
0003a3 940e 00af
0003a5 e307
0003a6 940e 00af
0003a8 e000
0003a9 940e 00af
0003ab e000
0003ac 940e 00af
0003ae 940e 00a6
0003b0 ed00
0003b1 940e 00af
0003b3 e603
0003b4 940e 00af
0003b6 e000
0003b7 940e 00af
0003b9 e000
0003ba 940e 00af
0003bc e000
0003bd 940e 00af
0003bf e000
0003c0 940e 00af
0003c2 e000
0003c3 940e 00af
0003c5 e000
0003c6 940e 00af
0003c8 e000
0003c9 940e 00af
0003cb e000
0003cc 940e 00af
0003ce e002
0003cf 940e 00af
0003d1 e000
0003d2 940e 00af
0003d4 940e 00a6
0003d6 ed00
0003d7 940e 00af
0003d9 e704
0003da 940e 00af
0003dc e000
0003dd 940e 00af
0003df 940e 00ac
0003e1 98bb
0003e2 e001
0003e3 9300 0080
0003e5 9478      	Setup
                 
0003e6 c000      	rjmp	Main
                 
                 Main:
                 	;Check if the program should be running
0003e7 9478      	sei
0003e8 94f8      	cli
0003e9 9100 0080 	lds R16, Program_Running			
0003eb 3001      	cpi R16, 0x01
0003ec f7d1      	brne Main
                 
                 
                 	;Insert program code here
0003ed 9478      	sei
                 
0003ee cff8      rjmp Main


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
r0 :  11 r1 :  12 r2 :  10 r3 :   7 r4 :   4 r5 :   4 r6 :   3 r7 :   2 
r8 :   2 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 329 r17:   6 r18:  16 r19:  14 r20:  25 r21:   0 r22:   0 r23:   0 
r24:   0 r25:   0 r26:  15 r27:  15 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 17 out of 35 (48.6%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   7 add   :  11 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   8 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 196 cbi   :   1 cbr   :   1 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   9 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   1 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  17 inc   :   6 jmp   :   4 
ld    :   0 ldd   :   0 ldi   : 222 lds   :  24 lpm   :   0 lsl   :   1 
lsr   :   0 mov   :   2 movw  :   1 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   4 out   :  31 pop   :   0 
push  :   0 rcall :   0 ret   :  11 reti  :  11 rjmp  :  15 rol   :   0 
ror   :   0 sbc   :  10 sbci  :   1 sbi   :   0 sbic  :   0 sbis  :   2 
sbiw  :   0 sbr   :   1 sbrc  :   2 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   5 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  53 
sub   :   8 subi  :   1 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 41 out of 113 (36.3%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007de   1956      0   1956   32768   6.0%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
