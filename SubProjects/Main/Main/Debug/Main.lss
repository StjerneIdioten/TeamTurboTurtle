
AVRASM ver. 2.1.57  D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm Thu Apr 30 14:35:20 2015

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m32Adef.inc'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(21): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\SRAM-Mapping.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(22): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Delays.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(23): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Motor_Control.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(24): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\USART_Library.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(25): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\I2C.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(26): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\MPU-6050.inc'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(27): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\MPU-6050.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(28): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Timers.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(29): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Communication_Protocol.asm'
D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Main.asm(30): Including file 'D:\Github\TeamTurboTurtle\SubProjects\Main\Main\Interrupts.asm'
                 
                 ;Main.asm
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32Adef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32A
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32A
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32ADEF_INC_
                 #define _M32ADEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32A
                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32ADEF_INC_ */
                 
                 
                 
                 ;Interrupt vector mapping
                 .org 0x00
000000 c1af      rjmp Init
                 ;Timer1 Input Capture interrupt
                 .org	0x0C
00000c 940c 0156 jmp	Input_Capture
                 ;Timer0 CTC interrupt
                 .org 0x14
000014 940c 0116 jmp Timer0_Update
                 ;USART received interrupt
                 .org 0x1A
00001a 940c 0179 jmp Comm_Received
                 ;Comparator interrupt
                 .org 0x24
000024 940c 012b jmp Lap_Time
                 
                 
                 ;Library includes
                 .include "SRAM-Mapping.asm"
                 
                 ;SRAM starts at 0x60
                 
                 ;Accelerometer dataset from the MPU6050
                 .equ ACCEL_XOUT_H = 0x0060
                 .equ ACCEL_XOUT_L = 0x0061
                 .equ ACCEL_YOUT_H = 0x0062
                 .equ ACCEL_YOUT_L = 0x0063
                 .equ ACCEL_ZOUT_H = 0x0064
                 .equ ACCEL_ZOUT_L = 0x0065
                 
                 ;Temperature dataset from the MPU6050
                 .equ TEMP_OUT_H   = 0x0066
                 .equ TEMP_OUT_L   = 0x0067
                 
                 ;Gyro dataset from the MPU6050
                 .equ GYRO_XOUT_H  = 0x0068
                 .equ GYRO_XOUT_L  = 0x0069
                 .equ GYRO_YOUT_H  = 0x006A
                 .equ GYRO_YOUT_L  = 0x006B
                 .equ GYRO_ZOUT_H  = 0x006C
                 .equ GYRO_ZOUT_L  = 0x006D
                 
                 ;Time0 variables
                 .equ Timer_1ms_H  = 0x006E
                 .equ Timer_1ms_M  = 0x006F
                 .equ Timer_1ms_L  = 0x0070
                 
                 ;Finish line time stamp
                 .equ Time_Stamp_H = 0x0071
                 .equ Time_Stamp_M = 0x0072
                 .equ Time_Stamp_L = 0x0073
                 
                 ;Latest lap time
                 .equ Lap_time_L   = 0x0074
                 .equ Lap_time_M	  = 0x0075
                 .equ Lap_time_H	  = 0x0076
                 
                 ;Pulse Stuphs
                 .equ		Edge1_L			= 0x0077
                 .equ		Edge1_H			= 0x0078
                 .equ		Pulse_Time_L	= 0x0079
                 .equ		Pulse_Time_H	= 0x007A
                 
                 ;Status Register
                 .equ		SREG_1			= 0x007B
                 
                 .equ Comm_Received_Byte_Num = 0x007C
                 .equ Comm_Received_Byte_1 = 0x007D
                 .equ Comm_Received_Byte_2 = 0x007E
                 .equ Comm_Received_Byte_3 = 0x007F
                 
                 .equ Program_Running = 0x0080
                 
                 .include "Delays.asm"
                 
                 
                 ;Requires the Timer library made by Christian! And the SRAM-Mapping.asm
                 ;These macros are intended for a micro running 16MHZ
                 
                 ;This macro can generate from 1 to 255 ms of delay.  
                 ;Uses R16, R17 and R18
                 .MACRO	DELAY_MS_M					; Cycles to execute 
                 	LDI R16, @0 ;					; 1 cycle to execute
                 	DELAY_MS_M_2: ;-----------------/
                 	LDI R17, 15 ;	              /
                 	DELAY_MS_M_1:	;------------/    /
                 	LDI R18, 177;		     /    /
                 	DELAY_MS_M_0: ;-------/    /    /
                 	NOP ;			    /C   /B   /A
                 	NOP ;				/	 /	  /
                 	NOP ;				/	 /	  /
                 	DEC R18 ;		    /    /    /
                 	BRNE DELAY_MS_M_0 ;---/    /    /
                 	DEC R17 ;		         /    /
                 	NOP ;					 /	  /
                 	BRNE DELAY_MS_M_1 ;--------/    /
                 	DEC R16 ;		              /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	NOP ;						  /
                 	BRNE DELAY_MS_M_2 ;-------------/
                 .ENDMACRO
                 ; Block C: 177*(1+1+1+1+2)-1 = 1061
                 ; Block B: 15*(1+C+1+1+2)-1 = 15990 
                 ; Block A: x*(1+B+1+1+1+1+1+1+1+2)-1 = x*16000-1
                 ; Total # of cycles is: 1 + A = x*16000 
                 ; Formula for delay: x*1ms
                 
                 Delay_MS:
000026 2e90      	mov R9, R16
000027 9030 0070 	lds R3, Timer_1ms_L
000029 9040 006f 	lds R4, Timer_1ms_M
00002b 9050 006e 	lds R5, Timer_1ms_H
                 
                 Delay_MS_Loop:
                 	
00002d 9478      	sei
00002e 9060 0070 	lds R6, Timer_1ms_L
000030 9070 006f 	lds R7, Timer_1ms_M
000032 9080 006e 	lds R8, Timer_1ms_H
                 
000034 94f8      	cli
000035 1863      	sub R6, R3
000036 0874      	sbc R7, R4
000037 0885      	sbc R8, R5
                 
000038 1469      	cp R6, R9
                 
000039 f398      	brlo Delay_MS_Loop
00003a 9478      	sei
                 .include "Motor_Control.asm"
00003b 9508      
                  ;Author: StjerneIdioten
                 
                  .EQU	MOTOR_PIN = PD7
                 
                  .MACRO Motor_Init
                 	sbi DDRD, PD7
                 	ldi R16, 0b01101001
                 	out TCCR2, R16 
                  .ENDMACRO
                 
                  .MACRO Motor_Set 
                 	ldi R16, @0
                 	out OCR2, R16
                 .include "USART_Library.asm"
                 
                  ; Author: StjerneIdioten
                 
                  .MACRO  USART_Init
                 	;Set Baud Rate to 9600
                 	ldi R16,	@1	
                 	ldi R17,	@0
                 
                 	out	UBRRH,	R17
                 	out UBRRL,	R16
                 
                 	;Enable receiver and transmitter
                 	ldi R16,	(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)
                 	out	UCSRB,	R16
                 
                 	; Set frame format: 8data, 1stop bit
                 	ldi	R16,	(1<<URSEL)|(3<<UCSZ0)
                 	out	UCSRC,	R16
                  .ENDMACRO
                 
                  ;Waits for an empty transmit buffer and then moves R16 to the transmit buffer
                  USART_Transmit: 
                  USART_Transmit_Start:
                 	; Wait for empty transmit buffer
00003c 9b5d      	sbis	UCSRA,	UDRE
00003d cffe      	rjmp	USART_Transmit_Start
00003e b90c      	out	UDR, R16
00003f 9508      ret
                 
                 
                 ;Waits for a byte to be recived and outputs it to R16
                 USART_Receive:
                 USART_Receive_Start:
                 	; Wait for data to be received
000040 9b5f      	sbis UCSRA, RXC
000041 cffe      	rjmp USART_Receive_Start
                 	; Get and return received data from buffer
000042 b10c      	in r16, UDR
000043 9508      ret
                 
                 
                 ;Outputs a newline to serial. In the format of '\r\n'
                 .Macro USART_Newline
                 	ldi R16, 0x0D
                 	call USART_Transmit 
                 	ldi R16, 0x0A
                 	call USART_Transmit 
                 .ENDMACRO
                 
                 
                 ;Outputs the byte in R16 as a string of 8 ascii 1's or 0's
                 USART_Binary:
000044 2f10      	mov R17, R16			;Copy R16 to R17
000045 e020      	ldi R18, 0x00			;Set the counter to zero
                 USART_Binary_Loop:
000046 ff17      	sbrs R17, 7				;Skip if bit 7 in R17 is set
000047 c004      	rjmp USART_Binary_0		;Jump here if the it was 0
000048 e301      	ldi R16, '1'			;Load in ascii 1 in R16
000049 940e 003c 	call USART_Transmit		;Transmit the 1
00004b c003      	rjmp USART_Binary_End	;Jump to the end
                 USART_Binary_0:				
00004c e300      	ldi R16, '0'			;Load in ascii 0 in R16
00004d 940e 003c 	call USART_Transmit
                 USART_Binary_End:
00004f 0f11      	lsl R17					;Left shift R17
000050 9523      	inc R18					;Increment R18
000051 3028      	cpi R18, 0x08			;Check if we have converted and sent an entire byte yet
000052 f799      	brne USART_Binary_Loop	;Repeat if we haven't
000053 9508      ret
                 
                 
                 ;Expecs a 16 bit value in R17:R16
                 USART_Decimal_S16:
                 
000054 0198      	movw R19:R18, R17:R16
000055 ff37      	sbrs R19, 7
000056 c007      	rjmp USART_Decimal_S16_Count_10000
                 
                 USART_Decimal_S16_Signed:
000057 e20d      	ldi R16, '-'
000058 940e 003c 	call USART_Transmit
00005a 5021      	subi R18, 0x01
00005b 4030      	sbci R19, 0x00
00005c 9520      	com R18
00005d 9530      	com R19
                 
                 USART_Decimal_S16_Count_10000:
00005e 2744      	clr R20
00005f e2b7      	ldi XH, HIGH(10000)
000060 e1a0      	ldi XL, LOW(10000)
                 USART_Decimal_S16_Count_10000_Loop:
000061 9543      	inc R20
000062 1b2a      	sub R18, XL
000063 0b3b      	sbc R19, XH
000064 f7e0      	brcc USART_Decimal_S16_Count_10000_Loop
000065 954a      	dec R20
000066 0f2a      	add R18, XL
000067 1f3b      	adc R19, XH
000068 e300      	ldi R16, 0x30
000069 0f04      	add R16, R20
00006a 940e 003c 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_1000:
00006c 2744      	clr R20
00006d e0b3      	ldi XH, HIGH(1000)
00006e eea8      	ldi XL, LOW(1000)
                 USART_Decimal_S16_Count_1000_Loop:
00006f 9543      	inc R20
000070 1b2a      	sub R18, XL
000071 0b3b      	sbc R19, XH
000072 f7e0      	brcc USART_Decimal_S16_Count_1000_Loop
000073 954a      	dec R20
000074 0f2a      	add R18, XL
000075 1f3b      	adc R19, XH
000076 e300      	ldi R16, 0x30
000077 0f04      	add R16, R20
000078 940e 003c 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_100:
00007a 2744      	clr R20
00007b e0b0      	ldi XH, HIGH(100)
00007c e6a4      	ldi XL, LOW(100)
                 USART_Decimal_S16_Count_100_Loop:
00007d 9543      	inc R20
00007e 1b2a      	sub R18, XL
00007f 0b3b      	sbc R19, XH
000080 f7e0      	brcc USART_Decimal_S16_Count_100_Loop
000081 954a      	dec R20
000082 0f2a      	add R18, XL
000083 1f3b      	adc R19, XH
000084 e300      	ldi R16, 0x30
000085 0f04      	add R16, R20
000086 940e 003c 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_10:
000088 2744      	clr R20
000089 e0b0      	ldi XH, HIGH(10)
00008a e0aa      	ldi XL, LOW(10)
                 USART_Decimal_S16_Count_10_Loop:
00008b 9543      	inc R20
00008c 1b2a      	sub R18, XL
00008d 0b3b      	sbc R19, XH
00008e f7e0      	brcc USART_Decimal_S16_Count_10_Loop
00008f 954a      	dec R20
000090 0f2a      	add R18, XL
000091 1f3b      	adc R19, XH
000092 e300      	ldi R16, 0x30
000093 0f04      	add R16, R20
000094 940e 003c 	call USART_Transmit
                 
                 USART_Decimal_S16_Count_1:
000096 2744      	clr R20
000097 e0b0      	ldi XH, HIGH(1)
000098 e0a1      	ldi XL, LOW(1)
                 USART_Decimal_S16_Count_1_Loop:
000099 9543      	inc R20
00009a 1b2a      	sub R18, XL
00009b 0b3b      	sbc R19, XH
00009c f7e0      	brcc USART_Decimal_S16_Count_1_Loop
00009d 954a      	dec R20
00009e 0f2a      	add R18, XL
00009f 1f3b      	adc R19, XH
0000a0 e300      	ldi R16, 0x30
0000a1 0f04      	add R16, R20
0000a2 940e 003c 	call USART_Transmit
                 
                 .include "I2C.asm"
0000a4 9508      
                 ;I2C communication library 
                 
                  .equ I2C_ACK = 0x01	;Value for ACK used with I2C_Read
                  .equ I2C_NACK = 0x00	;Value for NACK used with I2C_Read
                 
                  .MACRO I2C_Init ;First argument is prescaler, second argument is TWBR
                 	;Set Prescaler
                 	ldi R16, @0
                 	out TWSR, R16
                 	
                 	;Set TWBR
                 	ldi R16, @1
                 	out TWBR, R16
                 
                 	;Enable I2C module
                 	ldi R16, (1<<TWEN)
                 	out TWCR, R16
                 
                 	nop ;Important delay to allow the module to start
                 
                  .ENDMACRO
                 
                 
                 ;This function sends a start command
                 I2C_Start:
                 	;Send Start condition
0000a5 ea04      	ldi r16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) 
0000a6 bf06      	out TWCR, r16
                 
                 I2C_Start_Wait:	
                 	;Wait for the start condition transmit			
0000a7 b706      	in r16,TWCR
0000a8 ff07      	sbrs r16,TWINT
0000a9 cffd      	rjmp I2C_Start_Wait
0000aa 9508      ret
                 
                 
                 ;This function sends a stop command
                 I2C_Stop:
                 	;Send Stop condition
0000ab e904      	ldi r16, (1<<TWINT)|(1<<TWSTO)|(1<<TWEN) 
0000ac bf06      	out TWCR, r16
0000ad 9508      ret
                 
                 
                 ;This function writes the data from R16, onto the I2C data line
                 I2C_Write_Call:
0000ae b903      	out TWDR, r16
0000af e804      	ldi r16, (1<<TWINT) | (1<<TWEN)
0000b0 bf06      	out TWCR, r16
                 
                 I2C_Write_Call_Wait:
0000b1 b706      	in r16,TWCR
0000b2 ff07      	sbrs r16,TWINT
0000b3 cffd      	rjmp I2C_Write_Call_Wait
0000b4 9508      ret
                 
                 ;This is an easy to use macro of the write function
                 .MACRO I2C_Write
                 	ldi R16, @0
                 	call I2C_Write_Call
                 .ENDMACRO
                 
                 ;This function reads in data from the I2C data line and stores it in R16.
                 ;Remember to set R16 to either I2C_ACK or I2C_NACK before calling the function!
                 ;Failure to do so may result in unwanted behaviour.
                 I2C_Read_Call:
0000b5 fd00      	sbrc r16,0
0000b6 c002      	rjmp I2C_Read_Call_ACK
0000b7 e804      	ldi r16, (1<<TWINT) | (1<<TWEN)
0000b8 c001      	rjmp I2C_Read_Call_Continue
                 I2C_Read_Call_ACK:
0000b9 ec04      	ldi r16, (1<<TWINT) | (1<<TWEN) | (1<<TWEA)
                 I2C_Read_Call_Continue:
0000ba bf06      	out TWCR, r16
                 I2C_Read_Call_Wait:
0000bb b706      	in r16,TWCR
0000bc ff07      	sbrs r16,TWINT
0000bd cffd      	rjmp I2C_Read_Call_Wait
                 
0000be b103      	in R16, TWDR
0000bf 9508      ret
                 
                 //Easy to use macro which takes I2C_Ack/I2C_Nack as argument.
                 .MACRO I2C_Read
                 	ldi R16, @0
                 	call I2C_Read_Call
                 .ENDMACRO
                 
                 
                 .include "MPU-6050.inc"
                 
                 .equ MPU6050_ADDRESS_R = 0b11010001 // Address with end read bit
                 .equ MPU6050_RA_XG_OFFS_TC = 0x00 //[7] PWR_MODE, [6:1] XG_OFFS_TC, [0] OTP_BNK_VLD
                 .equ MPU6050_RA_YG_OFFS_TC = 0x01 //[7] PWR_MODE, [6:1] YG_OFFS_TC, [0] OTP_BNK_VLD
                 .equ MPU6050_RA_ZG_OFFS_TC = 0x02 //[7] PWR_MODE, [6:1] ZG_OFFS_TC, [0] OTP_BNK_VLD
                 .equ MPU6050_RA_X_FINE_GAIN = 0x03 //[7:0] X_FINE_GAIN
                 .equ MPU6050_RA_Y_FINE_GAIN = 0x04 //[7:0] Y_FINE_GAIN
                 .equ MPU6050_RA_Z_FINE_GAIN = 0x05 //[7:0] Z_FINE_GAIN
                 .equ MPU6050_RA_XA_OFFS_H = 0x06 //[15:0] XA_OFFS
                 .equ MPU6050_RA_XA_OFFS_L_TC = 0x07
                 .equ MPU6050_RA_YA_OFFS_H = 0x08 //[15:0] YA_OFFS
                 .equ MPU6050_RA_YA_OFFS_L_TC = 0x09
                 .equ MPU6050_RA_ZA_OFFS_H = 0x0A //[15:0] ZA_OFFS
                 .equ MPU6050_RA_ZA_OFFS_L_TC = 0x0B
                 .equ MPU6050_RA_XG_OFFS_USRH = 0x13 //[15:0] XG_OFFS_USR
                 .equ MPU6050_RA_XG_OFFS_USRL = 0x14
                 .equ MPU6050_RA_YG_OFFS_USRH = 0x15 //[15:0] YG_OFFS_USR
                 .equ MPU6050_RA_YG_OFFS_USRL = 0x16
                 .equ MPU6050_RA_ZG_OFFS_USRH = 0x17 //[15:0] ZG_OFFS_USR
                 .equ MPU6050_RA_ZG_OFFS_USRL = 0x18
                 .equ MPU6050_RA_SMPLRT_DIV = 0x19
                 .equ MPU6050_RA_CONFIG = 0x1A
                 .equ MPU6050_RA_GYRO_CONFIG = 0x1B
                 .equ MPU6050_RA_ACCEL_CONFIG = 0x1C
                 .equ MPU6050_RA_FF_THR = 0x1D
                 .equ MPU6050_RA_FF_DUR = 0x1E
                 .equ MPU6050_RA_MOT_THR = 0x1F
                 .equ MPU6050_RA_MOT_DUR = 0x20
                 .equ MPU6050_RA_ZRMOT_THR = 0x21
                 .equ MPU6050_RA_ZRMOT_DUR = 0x22
                 .equ MPU6050_RA_FIFO_EN = 0x23
                 .equ MPU6050_RA_I2C_MST_CTRL = 0x24
                 .equ MPU6050_RA_I2C_SLV0_ADDR = 0x25
                 .equ MPU6050_RA_I2C_SLV0_REG = 0x26
                 .equ MPU6050_RA_I2C_SLV0_CTRL = 0x27
                 .equ MPU6050_RA_I2C_SLV1_ADDR = 0x28
                 .equ MPU6050_RA_I2C_SLV1_REG = 0x29
                 .equ MPU6050_RA_I2C_SLV1_CTRL = 0x2A
                 .equ MPU6050_RA_I2C_SLV2_ADDR = 0x2B
                 .equ MPU6050_RA_I2C_SLV2_REG = 0x2C
                 .equ MPU6050_RA_I2C_SLV2_CTRL = 0x2D
                 .equ MPU6050_RA_I2C_SLV3_ADDR = 0x2E
                 .equ MPU6050_RA_I2C_SLV3_REG = 0x2F
                 .equ MPU6050_RA_I2C_SLV3_CTRL = 0x30
                 .equ MPU6050_RA_I2C_SLV4_ADDR = 0x31
                 .equ MPU6050_RA_I2C_SLV4_REG = 0x32
                 .equ MPU6050_RA_I2C_SLV4_DO = 0x33
                 .equ MPU6050_RA_I2C_SLV4_CTRL = 0x34
                 .equ MPU6050_RA_I2C_SLV4_DI = 0x35
                 .equ MPU6050_RA_I2C_MST_STATUS = 0x36
                 .equ MPU6050_RA_INT_PIN_CFG = 0x37
                 .equ MPU6050_RA_INT_ENABLE = 0x38
                 .equ MPU6050_RA_DMP_INT_STATUS = 0x39
                 .equ MPU6050_RA_INT_STATUS = 0x3A
                 .equ MPU6050_RA_ACCEL_XOUT_H = 0x3B
                 .equ MPU6050_RA_ACCEL_XOUT_L = 0x3C
                 .equ MPU6050_RA_ACCEL_YOUT_H = 0x3D
                 .equ MPU6050_RA_ACCEL_YOUT_L = 0x3E
                 .equ MPU6050_RA_ACCEL_ZOUT_H = 0x3F
                 .equ MPU6050_RA_ACCEL_ZOUT_L = 0x40
                 .equ MPU6050_RA_TEMP_OUT_H = 0x41
                 .equ MPU6050_RA_TEMP_OUT_L = 0x42
                 .equ MPU6050_RA_GYRO_XOUT_H = 0x43
                 .equ MPU6050_RA_GYRO_XOUT_L = 0x44
                 .equ MPU6050_RA_GYRO_YOUT_H = 0x45
                 .equ MPU6050_RA_GYRO_YOUT_L = 0x46
                 .equ MPU6050_RA_GYRO_ZOUT_H = 0x47
                 .equ MPU6050_RA_GYRO_ZOUT_L = 0x48
                 .equ MPU6050_RA_EXT_SENS_DATA_00 = 0x49
                 .equ MPU6050_RA_EXT_SENS_DATA_01 = 0x4A
                 .equ MPU6050_RA_EXT_SENS_DATA_02 = 0x4B
                 .equ MPU6050_RA_EXT_SENS_DATA_03 = 0x4C
                 .equ MPU6050_RA_EXT_SENS_DATA_04 = 0x4D
                 .equ MPU6050_RA_EXT_SENS_DATA_05 = 0x4E
                 .equ MPU6050_RA_EXT_SENS_DATA_06 = 0x4F
                 .equ MPU6050_RA_EXT_SENS_DATA_07 = 0x50
                 .equ MPU6050_RA_EXT_SENS_DATA_08 = 0x51
                 .equ MPU6050_RA_EXT_SENS_DATA_09 = 0x52
                 .equ MPU6050_RA_EXT_SENS_DATA_10 = 0x53
                 .equ MPU6050_RA_EXT_SENS_DATA_11 = 0x54
                 .equ MPU6050_RA_EXT_SENS_DATA_12 = 0x55
                 .equ MPU6050_RA_EXT_SENS_DATA_13 = 0x56
                 .equ MPU6050_RA_EXT_SENS_DATA_14 = 0x57
                 .equ MPU6050_RA_EXT_SENS_DATA_15 = 0x58
                 .equ MPU6050_RA_EXT_SENS_DATA_16 = 0x59
                 .equ MPU6050_RA_EXT_SENS_DATA_17 = 0x5A
                 .equ MPU6050_RA_EXT_SENS_DATA_18 = 0x5B
                 .equ MPU6050_RA_EXT_SENS_DATA_19 = 0x5C
                 .equ MPU6050_RA_EXT_SENS_DATA_20 = 0x5D
                 .equ MPU6050_RA_EXT_SENS_DATA_21 = 0x5E
                 .equ MPU6050_RA_EXT_SENS_DATA_22 = 0x5F
                 .equ MPU6050_RA_EXT_SENS_DATA_23 = 0x60
                 .equ MPU6050_RA_MOT_DETECT_STATUS = 0x61
                 .equ MPU6050_RA_I2C_SLV0_DO = 0x63
                 .equ MPU6050_RA_I2C_SLV1_DO = 0x64
                 .equ MPU6050_RA_I2C_SLV2_DO = 0x65
                 .equ MPU6050_RA_I2C_SLV3_DO = 0x66
                 .equ MPU6050_RA_I2C_MST_DELAY_CTRL = 0x67
                 .equ MPU6050_RA_SIGNAL_PATH_RESET = 0x68
                 .equ MPU6050_RA_MOT_DETECT_CTRL = 0x69
                 .equ MPU6050_RA_USER_CTRL = 0x6A
                 .equ MPU6050_RA_PWR_MGMT_1 = 0x6B
                 .equ MPU6050_RA_PWR_MGMT_2 = 0x6C
                 .equ MPU6050_RA_BANK_SEL = 0x6D
                 .equ MPU6050_RA_MEM_START_ADDR = 0x6E
                 .equ MPU6050_RA_MEM_R_W = 0x6F
                 .equ MPU6050_RA_DMP_CFG_1 = 0x70
                 .equ MPU6050_RA_DMP_CFG_2 = 0x71
                 .equ MPU6050_RA_FIFO_COUNTH = 0x72
                 .equ MPU6050_RA_FIFO_COUNTL = 0x73
                 .equ MPU6050_RA_FIFO_R_W = 0x74
                 .include "MPU-6050.asm"
                 
                 ;This library relies on the I2C library made by StjerneIdioten.
                 ;This library relies on the "MPU-6050.inc" where all the definitions of registers are defined.
                 
                 //Setup the MPU-6050
                 .MACRO MPU6050_Init
                 
                 	call I2C_Start
                 
                 	I2C_Write MPU6050_ADDRESS_W
                 
                 	//Sets sample rate to 8000/1+7 = 1000Hz
                 	I2C_Write MPU6050_RA_SMPLRT_DIV
                 
                 	I2C_Write 0x07
                 
                 	//MPU6050_RA_CONFIG, Disable FSync, 256Hz DLPF
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_GYRO_CONFIG, Disable gyro self tests, scale of 500 degrees/s
                 	I2C_Write 0b00001000
                 
                 	//MPU6050_RA_ACCEL_CONFIG ,Disable accel self tests, scale of +-16g, no DHPF
                 	I2C_Write 0b00001000
                 
                 	//MPU6050_RA_FF_THR ,Freefall threshold of |0mg|
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_FF_DUR ,Freefall duration limit of 0
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_MOT_THR ,Motion threshold of 0mg
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_MOT_DUR ,Motion duration of 0s
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_ZRMOT_THR ,Zero motion threshold
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_ZRMOT_DUR ,Zero motion duration threshold
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_FIFO_EN ,Disable sensor output to FIFO buffer
                 	I2C_Write 0x00
                 
                 	//Aux I2C setup
                 	//MPU6050_RA_I2C_MST_CTRL, Sets AUX I2C to single master control, plus other config
                 	I2C_Write 0x00
                 
                 	//Setup AUX I2C slaves
                 	//MPU6050_RA_I2C_SLV0_ADDR
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV0_REG
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV0_CTR
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV1_ADDR
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV1_REG
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV1_CTRL
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV2_ADDR
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV2_REG
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV2_CTRL
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV3_ADDR
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV3_REG
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV3_CTRL
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV4_ADDR
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV4_REG
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV4_DO
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV4_CTRL
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV4_DI
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_MST_STATUS //Read-only
                 
                 	//MPU6050_RA_INT_PIN_CFG, Setup INT pin and AUX I2C pass through
                 	call I2C_Start
                 
                 	I2C_Write MPU6050_ADDRESS_W
                 
                 	I2C_Write MPU6050_RA_INT_PIN_CFG
                 
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_INT_ENABLE, Enable data ready interrupt
                     I2C_Write 0x00
                 
                 	//MPU6050_RA_DMP_INT_STATUS       //Read-only
                     //MPU6050_RA_INT_STATUS 3A        //Read-only
                     //MPU6050_RA_ACCEL_XOUT_H         //Read-only
                     //MPU6050_RA_ACCEL_XOUT_L         //Read-only
                     //MPU6050_RA_ACCEL_YOUT_H         //Read-only
                     //MPU6050_RA_ACCEL_YOUT_L         //Read-only
                     //MPU6050_RA_ACCEL_ZOUT_H         //Read-only
                     //MPU6050_RA_ACCEL_ZOUT_L         //Read-only
                     //MPU6050_RA_TEMP_OUT_H			  //Read-only
                     //MPU6050_RA_TEMP_OUT_L			  //Read-only
                     //MPU6050_RA_GYRO_XOUT_H          //Read-only
                     //MPU6050_RA_GYRO_XOUT_L          //Read-only
                     //MPU6050_RA_GYRO_YOUT_H          //Read-only
                     //MPU6050_RA_GYRO_YOUT_L          //Read-only
                     //MPU6050_RA_GYRO_ZOUT_H          //Read-only
                     //MPU6050_RA_GYRO_ZOUT_L          //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_00     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_01     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_02     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_03     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_04     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_05     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_06     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_07     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_08     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_09     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_10     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_11     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_12     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_13     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_14     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_15     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_16     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_17     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_18     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_19     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_20     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_21     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_22     //Read-only
                     //MPU6050_RA_EXT_SENS_DATA_23     //Read-only
                     //MPU6050_RA_MOT_DETECT_STATUS    //Read-only
                 
                 	//Slave out, dont care
                 
                 	//MPU6050_RA_I2C_SLV0_DO
                 	call I2C_Start
                 
                 	I2C_Write MPU6050_ADDRESS_W
                 
                 	I2C_Write MPU6050_RA_I2C_SLV0_DO
                 
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV1_DO
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV2_DO
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_SLV3_DO
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_I2C_MST_DELAY_CTRL, More slave config
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_SIGNAL_PATH_RESET, Reset sensor signal paths
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_MOT_DETECT_CTRL, Motion detection control
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_USER_CTRL, Disables FIFO, AUX I2C, FIFO and I2C reset bits to 0
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_PWR_MGMT_1, Sets clock source to gyro reference w/ PLL
                 	I2C_Write 0b00000010
                 
                 	//MPU6050_RA_PWR_MGMT_2, Controls frequency of wakeups in accel low power mode plus the sensor standby modes
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_BANK_SEL            //Not in datasheet
                     //MPU6050_RA_MEM_START_ADDR      //Not in datasheet
                     //MPU6050_RA_MEM_R_W             //Not in datasheet
                     //MPU6050_RA_DMP_CFG_1           //Not in datasheet
                     //MPU6050_RA_DMP_CFG_2           //Not in datasheet
                     //MPU6050_RA_FIFO_COUNTH		 //Read-only
                     //MPU6050_RA_FIFO_COUNTL         //Read-only
                 
                     //Data transfer to and from the FIFO buffer
                 	call I2C_Start
                 
                 	I2C_Write MPU6050_ADDRESS_W
                 
                 	I2C_Write MPU6050_RA_FIFO_R_W
                 
                 	I2C_Write 0x00
                 
                 	//MPU6050_RA_WHO_AM_I            //Read-only, I2C address
                 
                 	call I2C_Stop
                 .ENDMACRO
                 
                 //This macro gets the value stored in the Who_Am_I register in the MPU-6050. This will always return 0x68 independent of AD0! Useful for testing the connection.
                 .MACRO MPU6050_Get_Address
                 	call I2C_Start
                 
                 	I2C_Write MPU6050_ADDRESS_W
                 
                 	I2C_Write MPU6050_RA_WHO_AM_I
                 
                 	call I2C_Start
                 	
                 	I2C_Write MPU6050_ADDRESS_R
                 
                 	I2C_Read I2C_Nack
                 
                 	mov R17, R16
                 
                 	call I2C_Stop
                 
                 	mov R16, R17
                 
                 .ENDMACRO
                 
                 MPU6050_Read_Dataset:
0000c0 940e 00a5 	call I2C_Start
                 
0000c2 ed00
0000c3 940e 00ae 	I2C_Write MPU6050_ADDRESS_W
                 
0000c5 e30b
0000c6 940e 00ae 	I2C_Write MPU6050_RA_ACCEL_XOUT_H
                 
0000c8 940e 00a5 	call I2C_Start
                 
0000ca ed01
0000cb 940e 00ae 	I2C_Write MPU6050_ADDRESS_R
                 
0000cd e001
0000ce 940e 00b5 	I2C_Read I2C_Ack
                 
0000d0 9300 0060 	sts ACCEL_XOUT_H, R16
                 
0000d2 e001
0000d3 940e 00b5 	I2C_Read I2C_Ack
                 
0000d5 9300 0061 	sts ACCEL_XOUT_L, R16
                 
0000d7 e001
0000d8 940e 00b5 	I2C_Read I2C_Ack
                 
0000da 9300 0062 	sts ACCEL_YOUT_H, R16
                 
0000dc e001
0000dd 940e 00b5 	I2C_Read I2C_Ack
                 
0000df 9300 0063 	sts ACCEL_YOUT_L, R16
                 
0000e1 e001
0000e2 940e 00b5 	I2C_Read I2C_Ack
                 
0000e4 9300 0064 	sts ACCEL_ZOUT_H, R16
                 
0000e6 e001
0000e7 940e 00b5 	I2C_Read I2C_Ack
                 
0000e9 9300 0065 	sts ACCEL_ZOUT_L, R16
                 
0000eb e001
0000ec 940e 00b5 	I2C_Read I2C_Ack
                 
0000ee 9300 0066 	sts TEMP_OUT_H, R16
                 
0000f0 e001
0000f1 940e 00b5 	I2C_Read I2C_Ack
                 
0000f3 9300 0067 	sts TEMP_OUT_L, R16
                 
0000f5 e001
0000f6 940e 00b5 	I2C_Read I2C_Ack
                 
0000f8 9300 0068 	sts GYRO_XOUT_H, R16
                 
0000fa e001
0000fb 940e 00b5 	I2C_Read I2C_Ack
                 
0000fd 9300 0069 	sts GYRO_XOUT_L, R16
                 
0000ff e001
000100 940e 00b5 	I2C_Read I2C_Ack
                 
000102 9300 006a 	sts GYRO_YOUT_H, R16
                 
000104 e001
000105 940e 00b5 	I2C_Read I2C_Ack
                 
000107 9300 006b 	sts GYRO_YOUT_L, R16
                 
000109 e001
00010a 940e 00b5 	I2C_Read I2C_Ack
                 
00010c 9300 006c 	sts GYRO_ZOUT_H, R16
                 
00010e e000
00010f 940e 00b5 	I2C_Read I2C_Nack
                 
000111 9300 006b 	sts GYRO_YOUT_L, R16
                 
000113 940e 00ab 	call I2C_Stop
                 .include "Timers.asm"
000115 9508      
                 
                 
                 
                 ; Initialize timer0 to generate an output compare interrupt every 1[ms]
                 .MACRO Timer0_Init
                 			ldi		R16, 0b00001011			; CTC-mode, 1/64 prescaling -> 250 cycles pr ms.
                 			out		TCCR0, R16
                 			ldi		R16, 0x00
                 			out		TCNT0, R16				; Counter0 initialization
                 			ldi		R16, 249				; 249+1 cycles = 1[ms] for every output compare match
                 			out		OCR0, R16
                 			
                 			ldi		R16, 0x00
                 			out		TCCR1A, R16
                 			ldi		R16, 0b10000010			; Falling edge triggered, 1/1024 prescaling
                 			out		TCCR1B, R16	
                 			
                 			clr		R16
                 			sts		Timer_1ms_L, R16
                 			sts		Timer_1ms_M, R16
                 			sts		Timer_1ms_H, R16	
                 			
                 			sts		Time_Stamp_L, R16
                 			sts		Time_Stamp_M, R16
                 			sts		Time_Stamp_H, R16
                 			
                 			sts		Lap_time_L, R16
                 			sts		Lap_time_M, R16
                 			sts		Lap_time_H, R16
                 			
                 			sts		Edge1_L, R16
                 			sts		Edge1_H, R16
                 .ENDMACRO
                 
                 ; Timer subroutines
                 
                 Timer0_Update:
                 			
000116 e041      			ldi		R20, 0x01
000117 9000 0070 			lds		R0, Timer_1ms_L			
000119 0e04      			add		R0, R20						;Advance time by 1ms whenever timer0 has compare match
00011a 9200 0070 			sts		Timer_1ms_L, R0	
00011c f468      			brcc	Timer_Update_End
                 			
00011d e040      			ldi		R20, 0x00
00011e 9010 006f 			lds		R1, Timer_1ms_M				;24 bits = 16777 seconds = 4.6 hours... ish :D
000120 1e14      			adc		R1, R20
000121 9210 006f 			sts		Timer_1ms_M, R1	
000123 f430      			brcc	Timer_Update_End
                 			
000124 9020 006e 			lds		R2, Timer_1ms_H
000126 1e24      			adc		R2, R20
000127 9220 006e 			sts		Timer_1ms_H, R2
000129 f400      			brcc	Timer_Update_End
                 			
                 Timer_Update_End:	
                 		
00012a 9518      			reti
                 			
00012b 9000 0070 Lap_Time:	lds		R0, Timer_1ms_L				
00012d 9010 006f 			lds		R1, Timer_1ms_M				; Current time since startup in ms
00012f 9020 006e 			lds		R2, Timer_1ms_H				 
                 			
000131 9030 0073 			lds		R3, Time_Stamp_L			
000133 9040 0072 			lds		R4, Time_Stamp_M			; Time stamp at start of lap
000135 9050 0071 			lds		R5, Time_Stamp_H
                 			
000137 9200 0073 			sts		Time_Stamp_L, R0			
000139 9210 0072 			sts		Time_Stamp_M, R1			; New time stamp for next lap
00013b 9220 0071 			sts		Time_Stamp_H, R2	
                 			
00013d 1803      			sub		R0, R3						
00013e 0814      			sbc		R1, R4						; Difference between current time and last time stamp
00013f 0825      			sbc		R2, R5
                 			
000140 2011      			tst R1
000141 f099      			breq Lap_Time_End
                 
000142 9200 0074 			sts		Lap_time_L, R0				
000144 9210 0075 			sts		Lap_time_M, R1				; Latest lap time
000146 9220 0076 			sts		Lap_time_H, R2
                 			
000148 e400      			ldi		R16, 0x40					; Disable Comparator interrupt
000149 b908      			out		ACSR, R16					; Global interrupt register
                 			
                 			/*
                 			ldi		R16, 50
                 			call 	Delay_MS
                 			cli									; Disable global interrupt
                 			*/
                 			
00014a e508      			ldi		R16, 0b01011000				; Enable Comparator interrupt and clear comparator interrupt flag
00014b b908      			out		ACSR, R16					; Global interrupt register
                 
                 			
00014c e407      			ldi R16, 'G'
00014d 940e 003c 			call USART_Transmit
00014f e00d
000150 940e 003c
000152 e00a
000153 940e 003c 			USART_Newline
                 			
                 Lap_Time_End:
                 
000155 9518      			reti			
                 
                 Input_Capture:
                 			
000156 9100 007b 			lds		R16, SREG_1
000158 fd00      			sbrc	R16, 0
000159 c00a      			rjmp	EDGE2
                 			
00015a b406      EDGE1:		in		R0, ICR1L
00015b b417      			in		R1, ICR1H
                 			
00015c 9200 0077 			sts		Edge1_L, R0
00015e 9210 0078 			sts		Edge1_H, R1
                 			
                 			
000160 6001      			sbr		R16, 0b00000001					; set bit 0 in R16 (performs a logical ORI instruction)
000161 9300 007b 			sts		SREG_1, R16
000163 9518      			reti
                 			
000164 9000 0077 EDGE2:		lds		R0, Edge1_L
000166 9010 0078 			lds		R1, Edge1_H
                 			
000168 b426      			in		R2, ICR1L
000169 b437      			in		R3, ICR1H
                 			
00016a 1820      			sub		R2, R0
00016b 0831      			sbc		R3, R1
                 			
00016c 9220 0079 			sts		Pulse_Time_L, R2
00016e 9230 007a 			sts		Pulse_Time_H, R3
                 			
000170 e000      			ldi		R16, 0x00
000171 bd0d      			out		TCNT1H, R16						; Temp = R16
000172 bd0c      			out		TCNT1L, R16						; TCNT1L = R16 & TCNT1H = Temp
                 			
                 			
000173 9100 007b 			lds		R16, SREG_1
000175 7f0e      			cbr		R16, 0b00000001					; clear bit 0 in R16 (performs logical AND with complement of operand)
000176 9300 007b 			sts		SREG_1, R16
                 			
000178 9518      			reti
                 .include "Communication_Protocol.asm"
                 
                 	ldi R16, 0x01
                 	sts Comm_Received_Byte_Num, R16
                 	clr R16
                 	sts Comm_Received_Byte_1, R16
                 	sts Comm_Received_Byte_2, R16
                 	sts Comm_Received_Byte_3, R16
                 .ENDMACRO
                 
                 
                 ;Define Types
                 .equ Comm_Type_SET = 0x55
                 .equ Comm_Type_GET = 0xAA
                 
                 ;Define Set Commands
                 .equ Comm_Command_Start = 0x10
                 .equ Comm_Command_Stop = 0x11
                 
                 ;Define Get Commands
                 
                 
                 ;Implemetation of the required communication protocol
                 Comm_Received:
                 
000179 9100 007c 	lds R16, Comm_Received_Byte_Num			;What byte # did we receive
                 
00017b 3001      	cpi R16, 0x01							;If it was the first
00017c f019      	breq Comm_Received_Type					;Set the type
                 
00017d 3002      	cpi R16, 0x02							;If it was the second
00017e f041      	breq Comm_Received_Command				;Set the command
                 
                 	;Working under the assumption that if it was not the first or second byte, then it must be the third.
                 
00017f c00e      	rjmp Comm_Received_Execute
                 
                 
                 ;Received a type
                 Comm_Received_Type:
                 
000180 e002      	ldi R16, 0x02							;Set the counter to two
000181 9300 007c 	sts Comm_Received_Byte_Num, R16			;Store it
                 
000183 b10c      	in r16, UDR								;Read in the received type
000184 9300 007d 	sts Comm_Received_Byte_1, R16
000186 9518      	reti
                 
                 ;Received a command
                 Comm_Received_Command:
                 
000187 e003      	ldi R16, 0x03							;Set the counter to three
000188 9300 007c 	sts Comm_Received_Byte_Num, R16			;Store it
                 
00018a b10c      	in r16, UDR								;Read in the received command
00018b 9300 007e 	sts Comm_Received_Byte_2, R16
00018d 9518      	reti
                 
                 ;Execute the telegram received
                 Comm_Received_Execute:
                 
00018e b10c      	in r16, UDR								;Read in the received parameter
00018f 9300 007f 	sts Comm_Received_Byte_3, R16			;Store it
                 	
000191 e001      	ldi R16, 0x01							;Reset the counter
000192 9300 007c 	sts Comm_Received_Byte_Num, R16			;Store it
                 
                 ;---------------------------------------------------------------------------------------------------------------------
                 ;Types
                 ;---------------------------------------------------------------------------------------------------------------------
                 
000194 9100 007d 	lds R16, Comm_Received_Byte_1			;Load in the Type
                 
                 	;SET
000196 3505      	cpi R16, Comm_Type_SET					;Check if we received a SET and branch if it was
000197 f019      	breq Comm_Received_Type_Set				;
                 
                 	;GET
000198 3a0a      	cpi R16, Comm_Type_GET					;Check if we received a GET and branch if it was
000199 f0a9      	breq Comm_Received_Type_Get				;
                 
00019a 9518      	reti
                 ;---------------------------------------------------------------------------------------------------------------------
                 ;SET's
                 ;---------------------------------------------------------------------------------------------------------------------
                 
                 Comm_Received_Type_Set:
                 
00019b 9100 007e 	lds R16, Comm_Received_Byte_2			;Load in the second byte
                 
00019d 3100      	cpi R16, Comm_Command_Start				;Check if we received a Start command
00019e f019      	breq Comm_Received_Command_Start		;
                 
00019f 3101      	cpi R16, Comm_Command_Stop				;Check if we received a Stop command
0001a0 f041      	breq Comm_Received_Command_Stop			;
                 
0001a1 9518      	reti									;Do nothing if it was not a legit code
                 
                 ;Start
                 Comm_Received_Command_Start:
0001a2 e001      	ldi R16, 0x01
0001a3 9300 0080 	sts Program_Running, R16
0001a5 9100 007f 	lds R16, Comm_Received_Byte_3
0001a7 bd03      	out OCR2, R16 
0001a8 9518      	reti
                 
                 ;Stop
                 Comm_Received_Command_Stop:
0001a9 e000      	ldi R16, 0x00
0001aa 9300 0080 	sts Program_Running, R16
0001ac e000      	ldi R16, 0x00
0001ad bd03      	out OCR2, R16
0001ae 9518      	reti
                 
                 
                 ;---------------------------------------------------------------------------------------------------------------------
                 ;GET's
                 ;---------------------------------------------------------------------------------------------------------------------
                 
                 Comm_Received_Type_Get:	
                 
                 .include "Interrupts.asm"
0001af 9518      
                 
                 .MACRO Interrupts_Init
                 			ldi		R16, (1<<OCIE0)|(1<<TICIE1)		; enable interrupt on output compare match for timer0
                 			out		TIMSK, R16				; timer/interrupt masking register
                 			
                 			ldi R16, 0x48					; initialize comparator with bandgap reference and enable interrupt
                 			out ACSR, R16
                 
                 			ldi R16, (0<<ACME)				; disable comparator multiplexer (AIN1 = inverting input for comparator)
                 			out SFIOR, R16
                 
                 			sei								; enable global interrupt
                 .ENDMACRO
                 
                 Init:
                 	
                 	;Initialize the stack
0001b0 e50f      	LDI	R16, low(RAMEND)
0001b1 bf0d          OUT	SPL, R16
0001b2 e008      	LDI	R16, high(RAMEND)
0001b3 bf0e          OUT	SPH, R16			
                 
0001b4 e607
0001b5 e010
0001b6 bd10
0001b7 b909
0001b8 e908
0001b9 b90a
0001ba e806
0001bb bd00      	USART_Init 0b00000000,0b01100111  ;9600 baud, 16MHz clock
0001bc e001
0001bd 9300 007c
0001bf 2700
0001c0 9300 007d
0001c2 9300 007e
0001c4 9300 007f 	Comm_Init
0001c6 9a8f
0001c7 e609
0001c8 bd05      	Motor_Init
0001c9 e000
0001ca b901
0001cb e102
0001cc b900
0001cd e004
0001ce bf06
0001cf 0000      	I2C_Init 0x00,0x12	;Prescaler 4 and TWBR 12
0001d0 e00b
0001d1 bf03
0001d2 e000
0001d3 bf02
0001d4 ef09
0001d5 bf0c
0001d6 e000
0001d7 bd0f
0001d8 e802
0001d9 bd0e
0001da 2700
0001db 9300 0070
0001dd 9300 006f
0001df 9300 006e
0001e1 9300 0073
0001e3 9300 0072
0001e5 9300 0071
0001e7 9300 0074
0001e9 9300 0075
0001eb 9300 0076
0001ed 9300 0077
0001ef 9300 0078 	Timer0_Init
0001f1 940e 00a5
0001f3 ed00
0001f4 940e 00ae
0001f6 e109
0001f7 940e 00ae
0001f9 e007
0001fa 940e 00ae
0001fc e000
0001fd 940e 00ae
0001ff e008
000200 940e 00ae
000202 e008
000203 940e 00ae
000205 e000
000206 940e 00ae
000208 e000
000209 940e 00ae
00020b e000
00020c 940e 00ae
00020e e000
00020f 940e 00ae
000211 e000
000212 940e 00ae
000214 e000
000215 940e 00ae
000217 e000
000218 940e 00ae
00021a e000
00021b 940e 00ae
00021d e000
00021e 940e 00ae
000220 e000
000221 940e 00ae
000223 e000
000224 940e 00ae
000226 e000
000227 940e 00ae
000229 e000
00022a 940e 00ae
00022c e000
00022d 940e 00ae
00022f e000
000230 940e 00ae
000232 e000
000233 940e 00ae
000235 e000
000236 940e 00ae
000238 e000
000239 940e 00ae
00023b e000
00023c 940e 00ae
00023e e000
00023f 940e 00ae
000241 e000
000242 940e 00ae
000244 e000
000245 940e 00ae
000247 e000
000248 940e 00ae
00024a e000
00024b 940e 00ae
00024d e000
00024e 940e 00ae
000250 940e 00a5
000252 ed00
000253 940e 00ae
000255 e307
000256 940e 00ae
000258 e000
000259 940e 00ae
00025b e000
00025c 940e 00ae
00025e 940e 00a5
000260 ed00
000261 940e 00ae
000263 e603
000264 940e 00ae
000266 e000
000267 940e 00ae
000269 e000
00026a 940e 00ae
00026c e000
00026d 940e 00ae
00026f e000
000270 940e 00ae
000272 e000
000273 940e 00ae
000275 e000
000276 940e 00ae
000278 e000
000279 940e 00ae
00027b e000
00027c 940e 00ae
00027e e002
00027f 940e 00ae
000281 e000
000282 940e 00ae
000284 940e 00a5
000286 ed00
000287 940e 00ae
000289 e704
00028a 940e 00ae
00028c e000
00028d 940e 00ae
00028f 940e 00ab 	MPU6050_Init
000291 940e 00a5
000293 ed00
000294 940e 00ae
000296 e109
000297 940e 00ae
000299 e007
00029a 940e 00ae
00029c e000
00029d 940e 00ae
00029f e008
0002a0 940e 00ae
0002a2 e008
0002a3 940e 00ae
0002a5 e000
0002a6 940e 00ae
0002a8 e000
0002a9 940e 00ae
0002ab e000
0002ac 940e 00ae
0002ae e000
0002af 940e 00ae
0002b1 e000
0002b2 940e 00ae
0002b4 e000
0002b5 940e 00ae
0002b7 e000
0002b8 940e 00ae
0002ba e000
0002bb 940e 00ae
0002bd e000
0002be 940e 00ae
0002c0 e000
0002c1 940e 00ae
0002c3 e000
0002c4 940e 00ae
0002c6 e000
0002c7 940e 00ae
0002c9 e000
0002ca 940e 00ae
0002cc e000
0002cd 940e 00ae
0002cf e000
0002d0 940e 00ae
0002d2 e000
0002d3 940e 00ae
0002d5 e000
0002d6 940e 00ae
0002d8 e000
0002d9 940e 00ae
0002db e000
0002dc 940e 00ae
0002de e000
0002df 940e 00ae
0002e1 e000
0002e2 940e 00ae
0002e4 e000
0002e5 940e 00ae
0002e7 e000
0002e8 940e 00ae
0002ea e000
0002eb 940e 00ae
0002ed e000
0002ee 940e 00ae
0002f0 940e 00a5
0002f2 ed00
0002f3 940e 00ae
0002f5 e307
0002f6 940e 00ae
0002f8 e000
0002f9 940e 00ae
0002fb e000
0002fc 940e 00ae
0002fe 940e 00a5
000300 ed00
000301 940e 00ae
000303 e603
000304 940e 00ae
000306 e000
000307 940e 00ae
000309 e000
00030a 940e 00ae
00030c e000
00030d 940e 00ae
00030f e000
000310 940e 00ae
000312 e000
000313 940e 00ae
000315 e000
000316 940e 00ae
000318 e000
000319 940e 00ae
00031b e000
00031c 940e 00ae
00031e e002
00031f 940e 00ae
000321 e000
000322 940e 00ae
000324 940e 00a5
000326 ed00
000327 940e 00ae
000329 e704
00032a 940e 00ae
00032c e000
00032d 940e 00ae
00032f 940e 00ab 	MPU6050_Init
000331 940e 00a5
000333 ed00
000334 940e 00ae
000336 e109
000337 940e 00ae
000339 e007
00033a 940e 00ae
00033c e000
00033d 940e 00ae
00033f e008
000340 940e 00ae
000342 e008
000343 940e 00ae
000345 e000
000346 940e 00ae
000348 e000
000349 940e 00ae
00034b e000
00034c 940e 00ae
00034e e000
00034f 940e 00ae
000351 e000
000352 940e 00ae
000354 e000
000355 940e 00ae
000357 e000
000358 940e 00ae
00035a e000
00035b 940e 00ae
00035d e000
00035e 940e 00ae
000360 e000
000361 940e 00ae
000363 e000
000364 940e 00ae
000366 e000
000367 940e 00ae
000369 e000
00036a 940e 00ae
00036c e000
00036d 940e 00ae
00036f e000
000370 940e 00ae
000372 e000
000373 940e 00ae
000375 e000
000376 940e 00ae
000378 e000
000379 940e 00ae
00037b e000
00037c 940e 00ae
00037e e000
00037f 940e 00ae
000381 e000
000382 940e 00ae
000384 e000
000385 940e 00ae
000387 e000
000388 940e 00ae
00038a e000
00038b 940e 00ae
00038d e000
00038e 940e 00ae
000390 940e 00a5
000392 ed00
000393 940e 00ae
000395 e307
000396 940e 00ae
000398 e000
000399 940e 00ae
00039b e000
00039c 940e 00ae
00039e 940e 00a5
0003a0 ed00
0003a1 940e 00ae
0003a3 e603
0003a4 940e 00ae
0003a6 e000
0003a7 940e 00ae
0003a9 e000
0003aa 940e 00ae
0003ac e000
0003ad 940e 00ae
0003af e000
0003b0 940e 00ae
0003b2 e000
0003b3 940e 00ae
0003b5 e000
0003b6 940e 00ae
0003b8 e000
0003b9 940e 00ae
0003bb e000
0003bc 940e 00ae
0003be e002
0003bf 940e 00ae
0003c1 e000
0003c2 940e 00ae
0003c4 940e 00a5
0003c6 ed00
0003c7 940e 00ae
0003c9 e704
0003ca 940e 00ae
0003cc e000
0003cd 940e 00ae
0003cf 940e 00ab 	MPU6050_Init
                 
0003d1 e000      	ldi R16, (0<<PB3)
0003d2 bb07      	out	DDRB, R16
                 
0003d3 e001      	ldi R16, 0x01
0003d4 9300 0080 	sts Program_Running, R16
                 
0003d6 e202
0003d7 bf09
0003d8 e408
0003d9 b908
0003da e000
0003db bf00
0003dc 9478      	Interrupts_Init ; Must be the last thing to be enabled!
0003dd c000      	rjmp	Main
                 
                 Main:
                 	;Check if the program should be running
0003de 9478      	sei
0003df 94f8      	cli
0003e0 9100 0080 	lds R16, Program_Running			
0003e2 3001      	cpi R16, 0x01
0003e3 f7d1      	brne Main
                 
                 
                 	;Insert program code here
0003e4 9478      	sei
                 
0003e5 cff8      rjmp Main


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
r0 :  11 r1 :  12 r2 :  10 r3 :   7 r4 :   4 r5 :   4 r6 :   3 r7 :   2 
r8 :   2 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 321 r17:   6 r18:  16 r19:  14 r20:  25 r21:   0 r22:   0 r23:   0 
r24:   0 r25:   0 r26:  15 r27:  15 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 17 out of 35 (48.6%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   7 add   :  11 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   8 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 196 cbi   :   0 cbr   :   1 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   7 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   1 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :   6 jmp   :   4 
ld    :   0 ldd   :   0 ldi   : 226 lds   :  24 lpm   :   0 lsl   :   1 
lsr   :   0 mov   :   2 movw  :   1 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :  31 pop   :   0 
push  :   0 rcall :   0 ret   :  10 reti  :  11 rjmp  :  15 rol   :   0 
ror   :   0 sbc   :  10 sbci  :   1 sbi   :   1 sbic  :   0 sbis  :   2 
sbiw  :   0 sbr   :   1 sbrc  :   2 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   5 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  53 
sub   :   8 subi  :   1 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 39 out of 113 (34.5%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007cc   1938      0   1938   32768   5.9%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
